*vim-markbar.txt* Open a sidebar showing your marks and their contexts

Author:     Yilin Yang <yiliny@umich.edu>
License:    MIT

*vim-markbar*
================================================================================
CONTENTS                                                *vim-markbar-contents*

    1. Introduction.................................|vim-markbar-introduction|
    2. Usage........................................|vim-markbar-usage|
    3. Options......................................|vim-markbar-options|
       3.1. General Markbar Options.................|vim-markbar-general-options|
       3.2. Peekaboo-Specific Options...............|vim-markbar-peekaboo-options|
    4. Highlighting.................................|vim-markbar-highlighting|

================================================================================
INTRODUCTION                                            *vim-markbar-introduction*

vim's marks act as lightning-fast bookmarks, and are handy for rapid navigation:
setting them and jumping to them each take only two keystrokes. But since
marks are only identified by a single letter, number, or other symbol, it can
be hard to use more than a few at a time.

You can refresh your memory using the built-in `:marks` command, but the menu
this spawns is purely informational and also a bit sparse. vim-markbar serves
as a fancier extension of the `:marks` menu.

If you like vim-markbar, please star it on GitHub! This boosts its visibility
and helps others discover it as well!

================================================================================
USAGE                                                   *vim-markbar-usage*

                                                    *vim-markbar-setting-marks*
If you're using this plugin, you probably already know how to set marks. If
you don't, or if you'd like a refresher, see `:help mark-motions` for more
details.

                                                    *vim-markbar-open-markbar*
This section assumes default keymappings. All of these are provided for you
except for the mappings to open or close the markbar itself. I recommend
the following: >
    map <Leader>m <Plug>ToggleMarkbar
<
This mapping can open the markbar and close the markbar, if it is already
open. (These functions also available as two distinct mappings if you want to
map them separately: see below.) If you haven't rebound your leader key, this
mapping is functionally equivalent to `<Backslash>m`.

Your cursor moves to the markbar once it's open. You can move the cursor using
the standard navigation keys (`j` and `k`, or the arrow keys), or cycle
through the marks using the 'next/previous mark' mappings (|g:markbar_next_mark_mapping|).
The 'next/previous mark' mappings also accept counts.

When you move the cursor, the markbar will echo the "currently selected" mark
at the bottom-left of the screen.

                                                    *vim-markbar-jump-to-mark*
Jump to the selected mark by hitting `<Enter>`. By default, this closes the
markbar, opens the selected mark's file in the current buffer, and moves the
cursor to the line and column at which the mark was set.

                                                    *vim-markbar-rename-mark*
Rename the selected mark by hitting `r`. This allows you to give a new name to
this mark. If the mark is "global" (i.e. an uppercase letter or a number),
this name will stay the same as you edit different files. If the mark is
"local" (i.e. a lowercase letter or a punctuation mark), the name will be
"local" to only the current buffer.

                                                    *vim-markbar-reset-mark*
Clear the name of the selected mark by hitting `c`. This resets the mark's
name to its default name, which typically includes basic information about the
mark, including its line number, parent file, and so on.

                                                    *vim-markbar-delete-mark*
Delete the mark entirely by hitting `d`.

Note that this deletion may not always "stick," especially with
non-alphanumeric marks (which have special meanings and are set automatically
by vim) and with numeric marks (which technically aren't meant to be
manipulable by the user).  If this bothers you, you can remove the mark from
|g:markbar_marks_to_display|, or try to delete the mark explicitly using
`delmarks` (see `:help delmarks`).


================================================================================
OPTIONS                                                 *vim-markbar-options*

vim-markbar is meant to be customizable to suit its users' needs. A list of
its configurable options is provided below.

--------------------------------------------------------------------------------
GENERAL MARKBAR OPTIONS                                 *vim-markbar-general-options*

These options affect to the "standard" vim-markbar, i.e. the one you open with
a `<Plug>ToggleMarkbar` or `<Plug>OpenMarkbar` mapping, as well as the plugin
as a whole.

For options unique to the "peekaboo" markbar, see |vim-markbar-peekaboo-options|.

*g:markbar_marks_to_display*                             |(v:t_string)|
    `Default Value:` `'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'`

*g:markbar_peekaboo_marks_to_display*
    `Default Value:` `'''abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'`

    The marks to display in the markbar, listed in order. The mark
    corresponding to the leftmost character (`'a`, in the example above) is
    listed first in the markbar, if it is set.

    Marks not listed in the string above are not listed in the markbar.

*g:markbar_persist_mark_names*                           |(v:t_bool)|
    `Default Value:` `v:true`

    Whether to preserve user-set mark names in the |viminfo-file| (in vim)
    or the |shada-file| (in neovim). When false, vim-markbar will forget every
    mark's name when vim exits.

    vim-markbar sets this to `v:false` when |viminfofile| or |shadafile| is
    `'NONE'`.

    Note that mark names won't necessarily synchronize between multiple
    running vim/neovim instances.

    Requires |viminfo-!| (in vim) or |shada-!| (in neovim) to work properly.

    See |vim-markbar-rename-mark|.

*g:markbar_foldopen*                                     |(v:t_bool)|
    `Default Value`: (set from the 'foldopen' option, see `:help fdo`)

    Whether to expand folds when jumping to a mark located inside of a closed
    |fold|. When enabled, mimics the behavior of `set foldopen=mark` by opening
    "just enough" folds so that the mark's line is visible.

    If 'foldopen' contains `"mark"` (which it should, by default), this
    will default to `v:true`. Otherwise, this will default to `v:false`.

    Note that this variable is not synchronized to 'foldopen': it will not
    update if 'foldopen' is changed after |g:markbar_foldopen| is initialized.

*g:markbar_force_clear_shared_data_on_delmark*           |(v:t_bool)|
    `Default Value`: `v:false`

    Whether to `:wviminfo!` or `:wshada!` on deleting a mark.

    vim versions without patch 8.2.0050 and all neovim versions (as of the
    time of writing) may not "remember" when marks are deleted, i.e. a mark
    deleted through the markbar may reappear in the markbar after closing and
    reopening (neo)vim.

    A heavy-handed solution to this is to |:wviminfo!| in vim or |:wshada!| in
    neovim whenever vim-markbar deletes a mark. This has the side effect of
    "throwing away" the old contents of the |viminfo-file| or |shada-file|,
    and possibly resetting |'quote| marks. Because of those side effects, this
    option is disabled by default.

*g:markbar_open_vertical*                                |(v:t_bool)|
*g:markbar_peekaboo_open_vertical*
    `Default Value:` `v:true`

    Whether to open the markbar as a vertical split (i.e. as a "sidebar"). If
    set to `v:false`, the markbar will open horizontally along the bottom or
    top of the screen.

*g:markbar_width*                                        |(v:t_number)|
*g:markbar_peekaboo_width*
    `Default Value:` `35`

    The width of a vertical markbar, in columns of text.

*g:markbar_height*                                       |(v:t_number)|
*g:markbar_peekaboo_height*
    `Default Value:` `30`

    The height of a horizontal markbar, in lines of text.

*g:markbar_close_after_go_to*                            |(v:t_bool)|
*g:markbar_peekaboo_close_after_go_to*
    `Default Value:` `v:true`

    Whether to close the markbar after using it to jump to a mark.

*g:markbar_open_position*                                |(v:t_string)|
*g:markbar_peekaboo_open_position*
    `Default Value:` `'botright'`

    The position at which to open the markbar. Potential values include:
    - `leftabove` (or `aboveleft`)
    - `rightbelow` (or `belowright`)
    - `topleft`
    - `botright`

    These are literal vimscript commands for opening splits. For further
    details, see `:help botright` (and so on).

*g:markbar_buffer_name*                                  |(v:t_string)|
    `Default Value:` `'( Markbar )'`

    The "filename" of the markbar, as displayed in the statusline.

    Avoid using special characters like square brackets when setting this
    option, as this might cause strange behavior in neovim.
    See `:help file-pattern` for a full list of characters to avoid.

*g:markbar_context_indent_block*                |(v:t_string)| OR |(v:t_number)|
    `Default Value: '    ' (four spaces)`
*g:markbar_peekaboo_context_indent_block*
    `Default Value: '  ' (two spaces)`

    The text block used to indent lines of context.

    This may be either a literal string, or a non-negative integer. If set to
    an integer, vim-markbar will "construct" an indentation block out of
    |g:markbar_context_indent_block| spaces.

    Note that a zero-width |g:markbar_context_indent_block| is inadvisable, as
    vim-markbar's syntax highlighting expects that context lines will be
    preceded with leading whitespace. This shouldn't break vim-markbar's
    functionality, however.

    To silence warnings related to zero-width indentation blocks, set
    |g:markbar_context_indent_block_NOWARN| to |v:true|.

*g:markbar_section_separation*                           |(v:t_number)|
    `Default Value:` `1`
*g:markbar_peekaboo_section_separation*
    `Default Value:` `0`

    The number of blank lines used to separate "blocks" of marks and context
    from each other.

*g:markbar_ignore_buffer_criteria*                       |(v:t_dict)|
    `Default Value:` `['unload', 'delete', 'wipe']`

    To avoid wasting CPU cycles attempting to cache marks set in "scratch"
    buffers, vim-markbar will ignore buffers whose 'bufhidden' values can be
    found in this list.

    Potential values include:
        `['unload', 'delete', 'wipe', 'hide', '<empty>']`

    Where `'<empty>'` corresponds to a 'bufhidden' value that is the
    zero-length null-string `(i.e. ''`).

*g:markbar_maximum_active_buffer_history*                |(v:t_number)|
    `Default Value:` `100`

    vim-markbar stores the most recently used "real" (i.e. non-ignored)
    buffer in a history. This option sets the maximum number of entries that
    can be held in this history.

    There's probably no real reason to change this option.

*g:markbar_num_lines_context*                            |(varies)|
    `Default Value:` `5`

    Configures the number of lines of context that vim-markbar should grab
    "around" each mark, based on whether the mark is a local mark or a file
    mark, and whether the mark is being shown in the peekaboo markbar.

    If set to a number, all marks will be shown with that many lines of
    context.

    If more granular configuration is desired, this may be set to a dict
    with the following keys, all of which are optional: >
        let g:markbar_num_lines_context = {
            \ 'around_local': 5,          " defaults to 5
            \ 'around_file': 5,           " defaults to 5
            \ 'peekaboo_around_local': 5, " defaults to 'around_local'
            \ 'peekaboo_around_file': 5,  " defaults to 'around_file'
        \ }
<
    If the dict contains unrecognized keys, vim-markbar will throw an
    exception. Values must be non-negative integers.

*g:markbar_jump_to_mark_mapping*                         |(v:t_string)|
*g:markbar_peekaboo_jump_to_mark_mapping*
    `Default Value:` `<cr>`

    The mapping used to jump to a mark from an active markbar.

*g:markbar_rename_mark_mapping*                          |(v:t_string)|
    `Default Value:` `r`

    The mapping used to rename a mark from an active markbar.

*g:markbar_reset_mark_mapping*                           |(v:t_string)|
    `Default Value:` `c`

    The mapping used to clear the name of a mark from an active markbar.

*g:markbar_delete_mark_mapping*                          |(v:t_string)|
    `Default Value:` `d`

    The mapping used to delete a mark entirely.

    May not "stick" in some cases. See |g:markbar_force_clear_shared_data_on_delmark|
    for a possible fix.

*g:markbar_next_mark_mapping*                            |(v:t_string)|
    `Default Value:` `n`

    The mapping used to move the cursor to the next mark listed in the markbar.

*g:markbar_previous_mark_mapping*                        |(v:t_string)|
    `Default Value:` `N`

    The mapping used to move the cursor to the previous mark listed in the
    markbar.

*g:markbar_close_peekaboo_mapping*                       |(v:t_string)|
    `Default Value:` `<Esc>`

    The mapping used to close the peekaboo markbar.

    You may want to change this to `qq` or similar when using vim (not neovim)
    in a terminal, because then the |^[| at the start of the |terminal-key-codes|
    for keys like <S-Up> and <PageDown> might erroneously trigger this mapping.
    vim-markbar tries to work around this.

*g:markbar_jump_to_exact_position*                       |(v:t_bool)|
    `Default Value:` `v:true`

    Whether to jump to the exact column number of a mark from the markbar.

    When |v:true|, this is functionally equivalent to jumping to a mark using
    the backtick character. See `:help mark-motions` for details.

*g:markbar_peekaboo_jump_to_exact_position*              |(v:t_bool)|
    `Default Value:` `v:false`

    Like |g:markbar_jump_to_exact_position| but for the peekaboo markbar.
    When true, a peekaboo markbar opened with |'| behaves like a peekaboo
    markbar opened with |`|.

*g:markbar_rename_mark_completion*                       |(v:t_string)|
    `Default Value:` `file_in_path`

    The command completions used when renaming a mark.

    See `:help command-completion` for further details.

*g:markbar_mark_name_format_string*                      |(v:t_string)|
*g:markbar_peekaboo_mark_name_format_string*
    `Default Value:` `'(l: %d, c: %d) %s'`

    The format string used when setting "default names" for a local mark.
    Note that leading and trailing whitespace are stripped before printing.

    See `:help printf` for further details.

*g:markbar_mark_name_arguments*                          |(v:t_list)|
*g:markbar_peekaboo_mark_name_arguments*
    `Default Value:` `['line', 'col', 'name']`

    The values with which to populate |g:markbar_mark_name_format_string|.

    Potential values include:
    - `'line'`: the line number of the mark
    - `'col'`: the column number of the mark
    - `'fname'`: the parent filename of the mark
    - `'name'`: the user-given name for the mark, or a descriptive default name
    - function reference: see below.

    If `'name'` is omitted, renaming marks will have no visible effect.

                                                *vim-markbar-custom-mark-names*
                                                *vim-markbar-function-references*
                                                *vim-markbar-funcref*
    Rather than being limited to the values above, you can also specify a
    function reference with which to populate a mark's name. This offers
    significantly more freedom at the cost of added complexity.

    If given a function reference when default-naming a mark, vim-markbar will
    call the function with one argument. This argument is a dictionary
    containing the following key-value pairs:
    - `'mark'`
      - A |v:t_string| of length 1; the character that represents the mark.
    - `'line'`
      - The line number of the mark, as a |v:t_number|.
    - `'column'`
      - The column number of the mark, as a |v:t_number|. This is the value
        shown by |:marks|, which is one less than the value from |getpos()|,
        i.e. the first column is 0 and not 1.
    - `'filename'`
      - The |bufname()| of the buffer holding the mark, as a |v:t_string|.
    - `'full_filepath'`
      - The full absolute filepath of the buffer holding the mark as
        a |v:t_string|.
    - `'user_given_name'`
        - The name given to the mark by the user. May be an empty string.
    - `'default_name'`
        - Descriptive default name for the mark. May be an empty string.
    - `'context'`
      - The context in which the mark appears. Each line of context is given
        as a |v:t_string| in a |v:t_list|.
    - `'mark_line_idx'`
      - The index of the line containing the mark within the `'context'` list.
    - `'TYPE'`
      - A |v:t_string| with the hardcoded value `'BasicMarkData'`. This is a
        quirk of the "vimscript class" idiom that I use in this plugin, which
        you can safely ignore.

    This dictionary is fully mutable and can be modified without side effects.

    As an example, one can replicate the default naming behavior of
    vim-markbar given for local marks by using a function reference in the
    following way: >
        function! CustomMarkName(mark_data) abort
            let l:name = a:mark_data.user_given_name
            if empty(l:name)
                let l:name = a:mark_data.default_name
            endif
            return printf('(l: %d, c: %d') %s, a:mark_data.line,
                \ a:mark_data.column, l:name)
        endfunction

        " ...

        let g:markbar_mark_name_format_string = '%s'
        let g:markbar_mark_name_arguments = [ function('CustomMarkName) ]
<
    See `:help function()` for more details.

*g:markbar_file_mark_format_string*                      |(v:t_string)|
*g:markbar_peekaboo_file_mark_format_string*
    `Default Value:` `%s %s [l: %d, c: %d]`

    Format string used to set default names for a |file-mark|, except numbered
    marks ('0 to '9). Leading/Trailing whitespace are stripped from the final
    string.

*g:markbar_file_mark_arguments*                          |(v:t_list)|
*g:markbar_peekaboo_file_mark_arguments*
    `Default Value:` `['name', 'fname', 'line', 'col']`

    Format string used to set default names for a numbered mark ('0 to '9).

*g:markbar_numbered_mark_format_string*                  |(v:t_string)|
*g:markbar_peekaboo_numbered_mark_format_string*
    `Default Value:` `g:markbar_file_mark_format_string`

*g:markbar_numbered_mark_arguments*                      |(v:t_list)|
*g:markbar_peekaboo_numbered_mark_arguments*
    `Default Value:` `g:markbar_file_mark_arguments`

*g:markbar_enable_mark_highlighting*                     |(v:t_bool)|
    `Default Value:` `v:true`

    Whether to highlight the "target position" in a mark's context to which the
    cursor would move if one were to jump to that mark from the markbar, i.e.
    whether to indicate a mark's location in its shown context.

*g:markbar_mark_marker*                                  |(v:t_string)|
    `Default Value:` `➜`

    vim-markbar uses a "mark marker" character to indicate that the character
    to follow should have the |markbarContextMarkHighlight| highlighting
    applied.  This character is hidden when viewing the markbar in normal
    mode, though it will appear in other modes, and it will appear in text
    yanked directly from lines of context in the markbar.

    This character is never meant to be seen, and can therefore be anything
    (except an empty string), though you shouldn't use "ordinary" glyphs (like
    letters and numbers) because these will not conceal properly.

    |g:markbar_mark_marker| can be more than one character in length, i.e.
    `'➜➜➜'` would be a valid "mark marker."

    It is suggested that this be set to some string of Unicode characters
    that would never reasonably be seen in any text file one might edit in vim.
    If you do, for whatever reason, regularly edit files that use the `'➜'` glyph,
    then you should change this setting.

    If you don't want the "mark marker" to appear at all (e.g. if you regularly
    yank lines of context from the markbar, and you don't want to remove the
    `'➜'` from that yanked text every time you paste it), then you should
    disable this character's insertion by setting
    |g:markbar_enable_mark_highlighting| to `v:false`.

    If you do this regularly, but you do still want "target position"
    highlighting, please open an Issue on GitHub!

--------------------------------------------------------------------------------
PEEKABOO-SPECIFIC OPTIONS                               *vim-markbar-peekaboo-options*

These are options unique to the 'peekaboo markbar' that may open when you hit
the backtick or apostrophe keys. Options duplicated from the standard markbar
can be found in |vim-markbar-general-options|.

*g:markbar_enable_peekaboo*                              |(v:t_bool)|
    `Default Value:` `v:true`

    Whether to open a 'peekaboo markbar' when hitting the apostrophe or
    backtick keys.

    Vim must restart for this change to take effect.

*g:markbar_peekaboo_apostrophe_mapping*                  |(v:t_string)|
    `Default Value:` `"'"`

    The key that opens a peekaboo markbar with "apostrophe-like" behavior, i.e.
    jumping to a mark will move the cursor to the "first non-blank character in
    the line of the specified location."

    See `:help mark-motions`.

*g:markbar_peekaboo_backtick_mapping*                    |(v:t_string)|
    `Default Value:` `'`'`

    The key that opens a peekaboo markbar with "backtick-like" behavior, i.e.
    jumping to a mark will move the cursor to the exact line and column of the
    target mark.

    See `:help mark-motions`.

*g:markbar_peekaboo_select_modifiers*                    |(v:t_string)|
    `Default Value:` `''`

    Comma-separated list of modifiers to be used when selecting a mark in the
    peekaboo markbar. For example, >

        " the apostrophe key ' opens the peekaboo markbar

        let g:markbar_peekaboo_select_modifiers = 'ctrl,shift'
        " Ctrl+Shift+a will select mark ['a]
<

    Use of this option is not recommended, since vim's handling of modifier
    keys is often unpredictable and unreliable. Consider using
    |g:markbar_peekaboo_select_prefix| instead.

*g:markbar_peekaboo_select_prefix*                       |(v:t_string)|
    `Default Value:` `'<leader>'`

    Keymapping to be prepended to all "select mark" mappings in the peekaboo
    markbar. For example, >

        " the apostrophe key ' opens the peekaboo markbar

        let g:markbar_peekaboo_select_prefix = '<leader>s'
        " <leader>sa will select mark ['a]
<

*g:markbar_peekaboo_jump_to_mark_modifiers*              |(v:t_string)|
    `Default Value:` `''`

    Comma-separated list of modifiers to be used when jumping directly to
    a mark in the peekaboo markbar. For example, >

        " the apostrophe key ' opens the peekaboo markbar

        let g:markbar_peekaboo_select_modifiers = 'ctrl,shift'
        " Ctrl+Shift+a will jump to the location of mark ['a]
<

    Use of this option is not recommended, since vim's handling of modifier
    keys is often unpredictable and unreliable. Consider using
    |g:markbar_peekaboo_jump_to_mark_prefix| instead.

*g:markbar_peekaboo_jump_to_mark_prefix*                 |(v:t_string)|
    `Default Value:` `'<leader>'`

    Keymapping to be prepended to all "jump to mark" mappings in the peekaboo
    markbar. For example, >

        " the apostrophe key ' opens the peekaboo markbar

        let g:markbar_peekaboo_select_prefix = '<leader>s'
        " <leader>sa will jump to the location of mark ['a]
<
*g:markbar_explicitly_remap_mark_mappings*               |(v:t_bool)|
    `Default Value:` `v:false`

    Whether to set explicit mappings to "short-circuit" the peekaboo
    markbar when you already know the mark to which you want to jump, i.e.
    whether to set mappings that are functionally equivalent to: >

        noremap 'a  :normal! 'a<cr>
        noremap 'b  :normal! 'b<cr>
        " ...
        noremap '0  :normal! '0<cr>
        " ...
        noremap ''  :normal! ''<cr>
        " ...
        noremap 'A  :normal! 'A<cr>
        " ...
        noremap `a  :normal! `a<cr>
        " etc. for all marks
<

    By default, the peekaboo markbar always opens when you tap the
    single-quote or backtick keys, even when it's not strictly necessary. For
    instance, double-tapping *''* to return to the position before the latest
    jump will (unnecessarily) open the markbar and then immediately jump to
    mark `['']`.

    On most machines, the markbar opens quickly enough that this introduces no
    noticeable delay, but in some environments (e.g. virtual machines, older
    laptops, Windows Subsystem for Linux) a noticeable delay may exist.
    Setting this option to `v:true` will skip opening the markbar
    if both keys are pressed in quick succession.

    Enabling this option will delay the appearance of the peekaboo markbar by
    'timeoutlen' milliseconds, which is why it defaults to `v:false`. Set this
    option to `v:true` if opening the peekaboo markbar is noticeably slow.

    If you want to preserve vim's "jump-to-mark" behavior, but still want the
    peekaboo markbar to open as quickly as possible, consider changing
    |g:markbar_peekaboo_apostrophe_mapping| and |g:markbar_peekaboo_backtick_mapping|.

*g:markbar_set_default_peekaboo_mappings*                |v:t_bool|
    `Default Value:` `v:true`

    Whether to set the default mappings to open the peekaboo markbar (i.e.
    apostrophe and backtick). Set this to `v:false` if you want to explicitly
    set your own mappings for opening the peekaboo markbar.

    You can use the following as the RHS in your mappings: >
        <Plug>OpenMarkbarPeekabooApostrophe
        <Plug>OpenMarkbarPeekabooBacktick

        " for instance,
        nmap <leader>a <Plug>OpenMarkbarPeekabooApostrophe
        " NOTE: `noremap` mappings aren't usable in this case
<
    Setting this to `v:false` does not disable the peekaboo markbar: the
    peekaboo markbar will still exist "in the background," but no mappings to
    open it will be set. See |g:markbar_enable_peekaboo| to disable the peekaboo
    markbar entirely.

    If set to `v:false`, vim-markbar will ignore options like
    |g:markbar_peekaboo_apostrophe_mapping| and
    |g:markbar_peekaboo_backtick_mapping|.

*g:markbar_peekaboo_invocation_filters*                  |v:t_list|
    `Default Value`: >
        [
            \ {bufno -> getbufvar(bufno, '&filetype') ==# 'netrw' },
        \ ]
<
    References to functions that accept a buffer number (see `:help bufnr`) and
    return `v:true` if opening the peekaboo markbar should silently fail if
    attempted from within that buffer. These functions are called "filters."

    Filters should have the following signature: >
        function! ExampleFilter(bufno)
            " don't open the peekaboo markbar from buffers named 'foobar'
            return bufname(a:bufno) ==# 'foobar'
        endfunction
<
    The filter above can be enabled through the following: >
        let g:markbar_peekaboo_invocation_filters += [function('ExampleFilter')]
<
    The above can be done more concisely (without explicitly defining a separate
    function) by using lambdas: >
        " replace all the above with,
        let g:markbar_peekaboo_invocation_filters +=
            \ [ {bufno -> bufname(bufno) ==# 'foobar'} ]
<
    This option exists because some (combinations of) plugins may inadvertently
    open the peekaboo markbar, e.g. if they contain a line like `normal '`,
    which would trigger the mapping to open an 'apostrophe-like' markbar.
    (Note that `normal! '` would not open the markbar, as `normal!` ignores
    user- or plugin-set mappings, and should be preferred over the naked
    `normal` in most cases.)

    As of the time of writing, netrw (used in conjunction with vim-signature and
    vim-vinegar) is one such problematic plugin (see: https://github.com/Yilin-Yang/vim-markbar/issues/8).
    If you encounter others, please report them on the Issues page.

================================================================================
HIGHLIGHTING                                            *vim-markbar-highlighting*

vim-markbar uses custom syntax highlighting in opened markbars. The markbar
syntax file defines the following highlight groups:


|markbarComment|                            `Default Value (Linkage): ` 'Comment'

    Lines that start with `"`.

|markbarSectionBrackets|                    `Default Value (Linkage): ` 'Type'

    The square brackets in, e.g. `['A]`.

|markbarSectionLowercaseMark|               `Default Value (Linkage): ` 'Type'

    The quote and letter in, e.g. `['a]`.

|markbarSectionSpecialLocalMark|            `Default Value (Linkage): ` 'Type'

    The quote and symbol in, e.g. `['^]`.

|markbarSectionNumberedMark|            `    Default Value (Linkage): ` 'Special'

    The quote and number in, e.g. `['5]`.

|markbarSectionUppercaseMark|               `Default Value (Linkage): ` 'Underlined'

    The quote and letter in, e.g. `['A]`.

|markbarSectionName|                        `Default Value (Linkage):` 'Title'

    The text following the colon in, e.g. '['A]:    Section Name Here'

|markbarContext|                            `Default Value (Linkage):` 'NormalNC'

    The lines below the section headings, plucked from around the mark's
    actual location.

|markbarContextEndOfBuffer|                 `Default Value (Linkage):` 'EndOfBuffer'

    The '~' character that appears when a mark's context is cut off by the top
    or bottom of its parent file.

|markbarContextMarkHighlight|               `Default Value (Linkage):` 'TermCursor'

    The highlighting used to indicate the "target position" (in a mark's
    shown context) to which the cursor would move on jumping to that mark from
    the markbar.

These can be customized by linking them to other preexisting highlight groups
(as is done by default), or by explicitly defining a colorscheme for the
highlight group to use.  >

    " 'reusing' an existing highlight group
    hi link markbarContext String

    " explicitly defining which colors to use, see `:h highlight-args` for details
    hi markbarSectionNumberedMark cterm=bold ctermfg=green gui=bold guifg=green
<


================================================================================
 vim:textwidth=80:filetype=help
