Execute (FetchBufferLineRange works with bufhidden = unload):
  tabnew 50lines.txt
  set bufhidden=unload
  hide
  let g:result = markbar#helpers#FetchBufferLineRange('*50lines.txt', 50, 50)
Then:
  let g:expected = ['fiftieth line']
  AssertEqual g:expected, g:result

Execute (FetchBufferLineRange works with bufhidden = delete):
  tabnew 50lines.txt
  set bufhidden=delete
  hide
  let g:result = markbar#helpers#FetchBufferLineRange('*50lines.txt', 50, 50)
Then:
  let g:expected = ['fiftieth line']
  AssertEqual g:expected, g:result

Execute (FetchBufferLineRange works with bufhidden = wipe):
  tabnew 50lines.txt
  set bufhidden=wipe
  hide
  let g:result = markbar#helpers#FetchBufferLineRange('*50lines.txt', 50, 50)
Then:
  let g:expected = ['fiftieth line']
  AssertEqual g:expected, g:result

Execute (FetchBufferLineRange respects g:markbar_readfile_max):
  tabnew 50lines.txt
  set bufhidden=delete
  hide
  let g:markbar_readfile_max = 49
  let g:result = markbar#helpers#FetchBufferLineRange('*50lines.txt', 50, 50)
Then:
  let g:expected = []
  AssertEqual g:expected, g:result

Execute (FetchBufferLineRange works with empty bufhidden and nohidden):
  tabnew 50lines.txt
  set bufhidden=
  set nohidden
  hide
  let g:result = markbar#helpers#FetchBufferLineRange('*50lines.txt', 50, 50)
Then:
  let g:expected = ['fiftieth line']
  AssertEqual g:expected, g:result

Execute (FetchBufferLineRange works with bufhidden = hide):
  " NOTE: this must go last, otherwise 50lines.txt will be loaded in a buffer
  " and no call to readfile() will take place
  tabnew 50lines.txt
  set bufhidden=hide
  hide
  let g:result = markbar#helpers#FetchBufferLineRange('*50lines.txt', 50, 50)
Then:
  let g:expected = ['fiftieth line']
  AssertEqual g:expected, g:result
