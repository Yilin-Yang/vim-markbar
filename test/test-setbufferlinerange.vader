Given (Test Buffer):
  first line
  second line
  third line
  fourth line
  fifth line

Execute (Replace Single Line):
  call markbar#helpers#SetBufferLineRange('%', 3, 4, ['foo'])
Expect:
  first line
  second line
  foo
  fourth line
  fifth line

Execute (Delete Single Line):
  call markbar#helpers#SetBufferLineRange('%', 3, 4, [])
Expect:
  first line
  second line
  fourth line
  fifth line

" NOTE: the buffer will still have one line remaining, after a wipe
Execute (Wipe Buffer, Crude):
  call markbar#helpers#SetBufferLineRange('%', 1, 99999999, [])
Then:
  AssertEqual 1, line('$')

" the 'crude' method is probably faster, and better, in practice.
Execute (Wipe Buffer, Proper):
  call markbar#helpers#SetBufferLineRange('%', 1, len(getbufline('%', 1, '$')) + 1, [])
Then:
  AssertEqual 1, line('$')

Execute (Wipe Buffer, More Proper):
  call markbar#helpers#SetBufferLineRange('%', 1, 0, [])
Then:
  AssertEqual 1, line('$')

Execute (Replace Range of Lines Removing):
  call markbar#helpers#SetBufferLineRange('%', 3, 5, ['foo'])
Expect:
  first line
  second line
  foo
  fifth line

Execute (Replace Range of Lines, Adding):
  call markbar#helpers#SetBufferLineRange('%', 3, 4, ['foo', 'bar'])
Expect:
  first line
  second line
  foo
  bar
  fourth line
  fifth line

Execute (Replace First Line):
  call markbar#helpers#SetBufferLineRange('%', 1, 2, ['foo'])
Expect:
  foo
  second line
  third line
  fourth line
  fifth line

Execute (Prepend Before First Line):
  call markbar#helpers#SetBufferLineRange('%', 1, 1, ['foo'])
Expect:
  foo
  first line
  second line
  third line
  fourth line
  fifth line

Execute (Append Lines, Explicit):
  call markbar#helpers#SetBufferLineRange('%', 6, 6, ['foo'])
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  foo

Execute (Append Lines, Zero-Indexing):
  call markbar#helpers#SetBufferLineRange('%', 0, 0, ['foo'])
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  foo

Execute (Replace Single Line, Negative-Indexing):
  call markbar#helpers#SetBufferLineRange('%', -1, 0, ['foo'])
Expect:
  first line
  second line
  third line
  fourth line
  foo

Execute (Replace Multiple Lines, Negative- and Zero-Indexing):
  call markbar#helpers#SetBufferLineRange('%', -3, 0, ['foo'])
Expect:
  first line
  second line
  foo

Execute (Replace Multiple Lines, Negative-Indexing):
  call markbar#helpers#SetBufferLineRange('%', -3, -2, ['foo', 'boo'])
Expect:
  first line
  second line
  foo
  boo
  fourth line
  fifth line

" YAGNI
" Execute (Replace Several Lines, Wrap Around End of File):
"   call markbar#helpers#SetBufferLineRange('%', -1, 3, ['foo', 'bar', 'goo'])
" Expect:
"   bar
"   goo
"   third line
"   fourth line
"   foo

Execute (Edit Another Buffer, Switch Back to Initial, Side Effects):
  set nohidden
  let s:test_buffer = bufnr('%')
  vnew
  let s:final_buffer = bufnr('%')
  call markbar#helpers#SetBufferLineRange(s:test_buffer, -3, -2, ['foo', 'boo'])
Then:
  AssertEqual 1, line('$')
  AssertEqual 0, &hidden
