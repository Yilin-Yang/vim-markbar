Include: clear-marks.vader
Include: load-test-files.vader

Execute (Perform test setup):
  edit 10lines.txt
  let g:bufnr_10lines = bufnr('%')

  let g:mark_chars = 'abcABC'

  normal! gg0mA5G5lmBG$mC
  normal! 1G0ma4G$3hmbGk07lmc

  let g:model = markbar#MarkbarModel#New(markbar#ShaDaRosters#New())
  call g:model.updateCurrentAndGlobal()


  let g:all_marks = g:model.getBufferCache(g:bufnr_10lines).marks_dict
  call extend(g:all_marks, g:model.getBufferCache(0).marks_dict)

Execute (BasicMarkData constructs properly from local and global MarkData):
  for g:char in split(g:mark_chars, '\zs')
    Assert has_key(g:all_marks, g:char), 'Setup failed: Missing mark '.g:char
  endfor
  for [g:char, g:markdata] in items(g:all_marks)
    let g:basic_markdata = markbar#BasicMarkData#New(g:markdata)
    AssertEqual g:char, g:basic_markdata.mark
    AssertEqual g:markdata.getMarkChar(), g:basic_markdata.mark
    AssertEqual g:markdata.getLineNo(), g:basic_markdata.line
    AssertEqual g:markdata.getColumnNo(), g:basic_markdata.column
    AssertEqual g:markdata.getBufname(), g:basic_markdata.filename
    AssertEqual g:markdata.getFilename(), g:basic_markdata.full_filepath
    AssertEqual g:markdata.getContext(), g:basic_markdata.context
    AssertEqual markbar#helpers#MarkLineIdxInContext(g:markdata.getContext()),
        \ g:basic_markdata.mark_line_idx
  endfor
