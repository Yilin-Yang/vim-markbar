Execute (Declare Validity Function, Helper Function):
  function! IsEven(number) abort
    return !float2nr(fmod(a:number, 2))
  endfunction

  function! ListIsNonempty(list) abort
    return !empty(a:list)
  endfunction

  function! EmptyListContents(list) abort
    call remove(a:list, 0, -1)
  endfunction

  function! AssertThrewOnEmpty() abort
    AssertEqual 'ConditionalStack is empty!', g:vader_exception
  endfunction

  function! NewStack() abort
    return markbar#ConditionalStack#New(function('IsEven'), 4)
  endfunction

  function! NewStackComplex() abort
    return markbar#ConditionalStack#New(function('ListIsNonempty'), 4)
  endfunction

Execute (ConditionalStack returns true on successful push()):
  let g:stack = NewStack()
  Assert g:stack.push(2), 'push() failed!'
  AssertEqual 1, g:stack.size()

Execute (ConditionalStack returns false on unsuccessful push()):
  let g:stack = NewStack()
  Assert !g:stack.push(1), 'push() succeeded!'
  AssertEqual 0, g:stack.size()

Execute (ConditionalStack.top() returns the top):
  let g:stack = NewStack()
  call g:stack.push(2)
  AssertEqual 2, g:stack.top()

Execute (ConditionalStack.top() throws when stack is empty):
  let g:stack = NewStack()
  AssertThrows call g:stack.top()
  call AssertThrewOnEmpty()

Execute (ConditionalStack doesn't push an invalid element):
  let g:stack = NewStack()
  call g:stack.push(2)
  call g:stack.push(3)
  call g:stack.push(2)
  AssertEqual 2, g:stack.size()

Execute (ConditionalStack shrinks when it becomes too large):
  let g:stack = NewStack()
  call g:stack.push(2)
  call g:stack.push(2)
  call g:stack.push(2)
  call g:stack.push(2)
  call g:stack.push(2)
Then:
  AssertEqual 3, g:stack.size()

Execute (ConditionalStack.top() removes invalid elements LIFO):
  let g:stack = NewStackComplex()
  let g:elements = [
    \ [1, 1, 1],
    \ [2, 2, 2],
    \ [1],
    \ [1]
  \ ]
  call g:stack.push(g:elements[0])
  call g:stack.push(g:elements[1])
  call g:stack.push(g:elements[2])
  call g:stack.push(g:elements[3])

  AssertEqual 4, g:stack.size()
  AssertEqual [1], g:stack.top()

  call EmptyListContents(g:elements[0])
  call EmptyListContents(g:elements[2])
  call EmptyListContents(g:elements[3])
  AssertEqual 4, g:stack.size()

  AssertEqual [2, 2, 2], g:stack.top()
  AssertEqual 2, g:stack.size()

Execute (ConditionalStack.clean() removes all invalid elements):
  let g:stack = NewStackComplex()
  let g:elements = [
    \ [1, 1, 1],
    \ [2, 2, 2],
    \ [1],
    \ [1]
  \ ]
  call g:stack.push(g:elements[0])
  call g:stack.push(g:elements[1])
  call g:stack.push(g:elements[2])
  call g:stack.push(g:elements[3])
  AssertEqual 4, g:stack.size()
Then:
  call EmptyListContents(g:elements[0])
  call EmptyListContents(g:elements[2])
  call EmptyListContents(g:elements[3])
  call g:stack.clean()
  AssertEqual 1, g:stack.size()
  AssertEqual [2, 2, 2], g:stack.top()
