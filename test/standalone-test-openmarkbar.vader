Include: clear-marks.vader
Include: WindowHelpers.vader
Include: MessageHelpers.vader

Execute (Set Settings, Set Plugin Mappings):
  let g:markbar_enable_mark_highlighting = v:false
  let g:markbar_jump_to_exact_position = v:true

  let g:markbar_num_lines_context = 3
  let g:markbar_open_vertical = v:true

Do (Open Markbar, No Marks):
  Mo
Expect:
  " Press ? for help

Do (Close Markbar):
  Mc
Then:
  AssertEqual '', getbufvar('.', 'is_markbar')

Do (Toggle Markbar Open, No Marks):
  Mt
Expect:
  " Press ? for help

Do (Toggle Markbar Closed, No Marks):
  Mt
  Mt
Then:
  AssertEqual '', getbufvar('.', 'is_markbar')

" If the 'open markbar' binding works while the 'toggle' binding doesn't,
" this should fail
Do (Set Marks, Toggle Markbar Open):
  :edit! 10lines.txt\<cr>
  1G05lmA5G05lmB10G05lmC
  Mt
Then:
  AssertEqual 0, &buflisted
  AssertEqual 'nofile', &buftype
  AssertEqual 'hide', &bufhidden
  AssertEqual 0, &swapfile
  AssertEqual 'markbar', &filetype
  AssertEqual 'markbar', &syntax
  AssertEqual 1, b:is_markbar

  AssertNotEqual len(getbufline(bufnr('%'), 1, '$')), getcurpos()[1],
      \ 'Cursor was pushed to bottom of markbar'

Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (Closing markbar leaves the markbar):
  Mo
  Mc
Then:
  Assert !exists('b:is_markbar')

Do (? shows verbose help):
  Mo?
Expect:
  " vim-markbar Keymappings
  " -----------------------
  " Press ? to close help
  " -----------------------
  " With the cursor over a mark or its context,
  " <cr>: jump to mark
  " n: move cursor to next mark
  " N: move cursor to previous mark
  " r: rename mark
  " c: reset mark's name
  " d: delete mark
  " -----------------------
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (Verbose help stays open in later markbars if not hidden):
  Mo
Expect:
  " vim-markbar Keymappings
  " -----------------------
  " Press ? to close help
  " -----------------------
  " With the cursor over a mark or its context,
  " <cr>: jump to mark
  " n: move cursor to next mark
  " N: move cursor to previous mark
  " r: rename mark
  " c: reset mark's name
  " d: delete mark
  " -----------------------
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  

Execute (Renaming mark without a mark selected shows a message):
  normal Mo
  normal! 7G
  AssertEqual '" n: move cursor to next mark', getline('.')
  " getline('.') seems to malfunction in vim when an echomsg is being shown
  normal r
  AssertEqual "\nNo mark selected for renaming.", LastMessage()

Execute (Name-clearing mark without a mark selected shows a message):
  normal Mo
  normal! 7G
  AssertEqual '" n: move cursor to next mark', getline('.')
  normal c
  AssertEqual "\nNo mark selected for name-clearing.", LastMessage()

Execute (Deleting mark without a mark selected shows a message):
  normal Mo
  normal! 7G
  AssertEqual '" n: move cursor to next mark', getline('.')
  normal d
  AssertEqual "\nNo mark selected for deletion.", LastMessage()

Do (Invalid mark rename, name-clear, deletions did nothing):
  Mo
Expect:
  " vim-markbar Keymappings
  " -----------------------
  " Press ? to close help
  " -----------------------
  " With the cursor over a mark or its context,
  " <cr>: jump to mark
  " n: move cursor to next mark
  " N: move cursor to previous mark
  " r: rename mark
  " c: reset mark's name
  " d: delete mark
  " -----------------------
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (? closes verbose help after opening):
  Mo?
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  

Do (Reclosing already closed markbar doesn't move cursor):
  :edit! 10lines.txt\<cr>
  7G05l
  :let g:cur_pos = getcurpos()\<cr>
  Mc
Then:
  AssertEqual g:cur_pos, getcurpos()

Do (Re-Open Closed Markbar (E499 Check)):
  Mo
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (Move Cursor to Existing Markbar):
  \<C-w>p
  Mo
Then:
  " TODO: find a way to check for 'didn't create a new split'
  " AssertEqual num_windows, len(tabpagebuflist())
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (Close Markbar):
  :edit! 10lines.txt\<cr>
  Mo
  Mc
Expect:
  first line
  second line
  third line
  fourth line
  fifth line
  sixth line
  seventh line
  eighth line
  ninth line
  tenth line

Execute (:bdelete Markbar):
  edit! 10lines.txt
  normal Mo
  bdelete
  normal Mo
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Execute (:bunload Markbar):
  edit! 10lines.txt
  normal Mo
  bunload
  normal Mo
Then:
  AssertEqual 'markbar', &filetype
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Execute (:bwipeout Markbar):
  edit! 10lines.txt
  normal Mo
  bwipeout
  normal Mo
Then:
  AssertEqual 'markbar', &filetype
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Execute (Preserve Window Layout On Closing Markbar):
  " TODO get window layout restoration to work, no matter how
  "      many splits are open
  tabnew
  vsplit
  vsplit
  split
  let g:saved_state = GetWinState()
  normal Mt
  normal Mt
Then:
  call AssertWinStatesAboutEqual(g:saved_state, GetWinState(), 1)

Do (Iterate Through Marks with Next):
  Mo
  ggnnn
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 12, g:cur_pos[1]

Do (Use Count with Next):
  Mo
  gg3n
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 12, g:cur_pos[1]

Do (Iterating through marks with next wraps around bottom of markbar):
  Mo
  ggnnnnn
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 7, g:cur_pos[1]

Do (Iterate Through Marks with Previous):
  Mo
  GNNN
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 2, g:cur_pos[1]

Do (Use Count with Previous):
  Mo
  G3N
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 2, g:cur_pos[1]

Do (Iterating through marks with previous wraps around top of markbar):
  Mo
  GNNNNN
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 7, g:cur_pos[1]

Do (Iterating backwards works when cursor is right of column 0):
  Mo
  12G$
  NN
Then:
  let g:cur_pos = getcurpos()
  AssertEqual 7, g:cur_pos[1]

Do (Go To Mark):
  Mo
  2G\<cr>
Then:
  AssertEqual '10lines.txt', expand('%:t')
  let g:cur_pos = getcurpos()

  " check line number
  AssertEqual 1, g:cur_pos[1]

  " check column number
  AssertEqual 6, g:cur_pos[2]

Do (Go To Mark Opens In Correct Window with markbar_open_position = 'topleft'):
  :let g:markbar_open_position = 'topleft'\<cr>
  :let g:last_window = win_getid()\<cr>
  Mo
  2G\<cr>
Then:
  let g:markbar_open_position = 'botright'

  AssertEqual g:last_window, win_getid(), "Jumped to mark in wrong window!"

Do (Go To Mark Opens In Correct Window With 'topleft' Horizontal Markbar):
  :let g:markbar_open_position = 'topleft'\<cr>
  :let g:markbar_open_vertical = v:false\<cr>
  :let g:last_window = win_getid()\<cr>
  Mo
  2G\<cr>
Then:
  let g:markbar_open_position = 'botright'
  let g:markbar_open_vertical = v:true

  AssertEqual g:last_window, win_getid(), "Jumped to mark in wrong window!"

Given:
  first line
    second line
  third line
Do (Go to mark goes to the first non-blank character without jump_to_exact_position):
  :let g:markbar_jump_to_exact_position = v:false\<cr>
  gg0maj$mbj0mc
  Mo
  ggnn\<cr>
Then:
  let g:markbar_jump_to_exact_position = v:true
  let g:cur_pos = getcurpos()
  AssertEqual 2, g:cur_pos[1]
  AssertEqual 3, g:cur_pos[2]

Execute (Explicitly Rename Mark):
  " NOTE: command line prompt used by 'rename' doesn't seem to work with vader
  let g:mark = g:markbar_model.getMarkData('B')
  call g:markbar_model.renameMark('B', 'New Name')
  normal Mo
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: New Name 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  

Do (Reset Mark Name):
  Mo
  7Gc
  Mo
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  

Do (Delete Mark):
  Mo
  5Gd
Expect:
  " Press ? for help
  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  

Do (Set Local Mark, Toggle Markbar Open):
  :edit! 10lines.txt\<cr>
  1G05lma
  Mt
Expect:
  " Press ? for help
  ['a]: (l: 1, c: 6)
      ~
      first line
      second line

  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (Delete Local Mark):
  :edit! 10lines.txt\<cr>
  Mt
  2G
  d
Expect:
  " Press ? for help
  ['B]: 10lines.txt [l: 5, c: 6]
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 6]
      ninth line
      tenth line
      ~
  
Do (Delete File Mark, Then Return to Buffer):
  :edit! 10lines.txt\<cr>
  :let g:bufnr = bufnr('%')\<cr>
  Mt
  gg
  n
  d
  n
  \<cr>
Then:
  AssertEqual g:bufnr, bufnr('%')

Do (Set New Marks):
  :edit! 10lines.txt\<cr>
  1G05lmA5G0mB10G$mC

Execute (Backtick-like mark location is highlighted when highlighting is turned on):
  let g:markbar_enable_mark_highlighting = v:true
  let g:markbar_jump_to_exact_position = v:true
  normal Mo
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      first➜ line
      second line

  ['B]: 10lines.txt [l: 5, c: 1]
      fourth line
      ➜fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 10]
      ninth line
      tenth lin➜e
      ~
  
Execute (Apostrophe-like mark location is highlighted when highlighting is turned on):
  let g:markbar_jump_to_exact_position = v:false
  normal Mo
Expect:
  " Press ? for help
  ['A]: 10lines.txt [l: 1, c: 6]
      ~
      ➜first line
      second line

  ['B]: 10lines.txt [l: 5, c: 1]
      fourth line
      ➜fifth line
      sixth line

  ['C]: 10lines.txt [l: 10, c: 10]
      ninth line
      ➜tenth line
      ~
  
Do (Set Local Marks):
  :edit! 10lines.txt\<cr>
  2G0ma4G$mb

Execute (Default mark names format can be customized):
  let g:markbar_mark_name_format_string = '%s {c: %d, l: %d}'
  let g:markbar_mark_name_arguments = ['fname', 'col', 'line']
  let g:markbar_file_mark_format_string = 'fname: %s, col: %d, line: %d'
  let g:markbar_file_mark_arguments = ['fname', 'col', 'line']
  edit! 10lines.txt
  normal Mo
Expect:
  " Press ? for help
  ['a]: 10lines.txt {c: 1, l: 2}
      first line
      ➜second line
      third line

  ['b]: 10lines.txt {c: 11, l: 4}
      third line
      ➜fourth line
      fifth line

  ['A]: fname: 10lines.txt, col: 6, line: 1
      ~
      ➜first line
      second line

  ['B]: fname: 10lines.txt, col: 1, line: 5
      fourth line
      ➜fifth line
      sixth line

  ['C]: fname: 10lines.txt, col: 10, line: 10
      ninth line
      ➜tenth line
      ~
  
Execute (g:markbar_num_lines_context controls how many context lines are shown):
  let g:markbar_num_lines_context = {
      \ 'around_local': 2,
      \ 'around_file': 0,
      \ 'peekaboo_around_local': 5,
      \ 'peekaboo_around_file': 8,
      \ }
  let g:markbar_jump_to_exact_position = v:true
  edit! 10lines.txt
  normal Mo

Expect:
  " Press ? for help
  ['a]: 10lines.txt {c: 1, l: 2}
      ➜second line
      third line

  ['b]: 10lines.txt {c: 11, l: 4}
      fourth lin➜e
      fifth line

  ['A]: fname: 10lines.txt, col: 6, line: 1

  ['B]: fname: 10lines.txt, col: 1, line: 5

  ['C]: fname: 10lines.txt, col: 10, line: 10
  
Execute (Reconfigured context length displays properly with highlighting disabled):
  " test an alternate code path
  let g:markbar_enable_mark_highlighting = v:false
  edit! 10lines.txt
  normal Mo

Expect:
  " Press ? for help
  ['a]: 10lines.txt {c: 1, l: 2}
      second line
      third line

  ['b]: 10lines.txt {c: 11, l: 4}
      fourth line
      fifth line

  ['A]: fname: 10lines.txt, col: 6, line: 1

  ['B]: fname: 10lines.txt, col: 1, line: 5

  ['C]: fname: 10lines.txt, col: 10, line: 10
  

Execute (Context displays properly when file marks show more context than local marks):
  let g:markbar_num_lines_context = {
      \ 'around_local': 2,
      \ 'around_file': 4,
      \ 'peekaboo_around_local': 5,
      \ 'peekaboo_around_file': 8,
      \ }
  edit! 10lines.txt
  normal Mo
Expect:
  " Press ? for help
  ['a]: 10lines.txt {c: 1, l: 2}
      second line
      third line

  ['b]: 10lines.txt {c: 11, l: 4}
      fourth line
      fifth line

  ['A]: fname: 10lines.txt, col: 6, line: 1
      ~
      first line
      second line
      third line

  ['B]: fname: 10lines.txt, col: 1, line: 5
      fourth line
      fifth line
      sixth line
      seventh line

  ['C]: fname: 10lines.txt, col: 10, line: 10
      ninth line
      tenth line
      ~
      ~
  
Execute (Configure to display only ' and " marks):
  let g:markbar_num_lines_context = 0
  let g:markbar_section_separation = 0
  let g:markbar_marks_to_display = '''"'
  let g:markbar_mark_name_format_string = 'mark'
  let g:markbar_mark_name_arguments = []
  edit! 10lines.txt
  normal! m'm"
  normal Mo
Expect:
  " Press ? for help
  ['']: mark
  ['"]: mark

Do (Trying to delete the ' mark prints an error message):
  :edit! 10lines.txt\<cr>
  Mogg
  nd
Then:
  AssertEqual "\nCannot delete the ' mark.", LastMessage()
Expect:
  " Press ? for help
  ['']: mark
  ['"]: mark

Do (Trying to delete the " mark prints an error message):
  :edit! 10lines.txt\<cr>
  Moggnn
  d
Then:
  AssertEqual "\nCannot delete the \" mark.", LastMessage()
Expect:
  " Press ? for help
  ['']: mark
  ['"]: mark
