################################################################################
# TrimMarksHeader tests
################################################################################

Execute (Empty Mark String):
  let markstring = 'mark line  col file/text'
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  AssertEqual '', result

Execute (LF-Terminated Empty Mark String):
  let markstring = "mark line  col file/text\n"
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  AssertEqual '', result

Execute (CRLF-Terminated Empty Mark String):
  let markstring = "mark line  col file/text\r\n"
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  AssertEqual '', result

Execute (Leading Whitespace Mark String):
  let markstring = "
    \  \n \n \n mark line  col file/text\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
  \ "
  AssertEqual expected, result

Execute (Single Item Mark String):
  let markstring = "
    \ mark line  col file/text\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
  \ "
  AssertEqual expected, result

Execute (CRLF-Terminated Single Item Mark String):
  let markstring = "
    \ mark line  col file/text\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\r\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\r\n
  \ "
  AssertEqual expected, result

Execute (Two Item Mark String):
  let markstring = "
    \ mark line  col file/text\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
    \ ]     24    0 Then:\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
    \ ]     24    0 Then:\n
  \ "
  AssertEqual expected, result

Execute (Three Item Mark String):
  let markstring = "
    \ mark line  col file/text\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
    \ ]     24    0 Then:\n
    \ .     23    0\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
    \ ]     24    0 Then:\n
    \ .     23    0\n
  \ "
  AssertEqual expected, result

Execute (Multiitem Mark String):
  let markstring = "
    \ mark line  col file/text\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
    \ [      1    0 The quick brown fox jumps over the lazy dog\n
    \ ]     24    0 Then:\n
    \ ^     23    2\n
    \ .     23    0\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\n
    \ [      1    0 The quick brown fox jumps over the lazy dog\n
    \ ]     24    0 Then:\n
    \ ^     23    2\n
    \ .     23    0\n
  \ "
  AssertEqual expected, result

Execute (CRLF-Terminated Multiitem Mark String):
  let markstring = "
    \ mark line  col file/text\r\n
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\r\n
    \ [      1    0 The quick brown fox jumps over the lazy dog\r\n
    \ ]     24    0 Then:\r\n
    \ ^     23    2\r\n
    \ .     23    0\r\n
  \ "
  let result = markbar#textmanip#TrimMarksHeader(markstring)
Then:
  let expected = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\r\n
    \ [      1    0 The quick brown fox jumps over the lazy dog\r\n
    \ ]     24    0 Then:\r\n
    \ ^     23    2\r\n
    \ .     23    0\r\n
  \ "
  AssertEqual expected, result

Execute (Error-Check Already Trimmed):
  let markstring = "
    \ A     97    0 ~/plugin/vim-markbar/plugin/vim-markbar.vim\r\n
    \ [      1    0 The quick brown fox jumps over the lazy dog\r\n
    \ ]     24    0 Then:\r\n
    \ ^     23    2\r\n
    \ .     23    0\r\n
  \ "
Then:
  AssertThrows markbar#textmanip#TrimMarksHeader(markstring)

Execute (Error-Check Already Trimmed Edge Case):
  let markstring = "
    \ [      1    0 The quick brown fox jumps over the lazy dog\r\n
    \ ]     24    0 Then:\r\n
    \ ^     23    2\r\n
    \ a     97    0 mark line  col file/text\r\n
    \ .     23    0\r\n
  \ "
Then:
  AssertThrows markbar#textmanip#TrimMarksHeader(markstring)


################################################################################
# MarkData tests
################################################################################

Execute (MarkData: Local Mark):
  let markstring = "
    \ a     97    0 mark line  col file/text\r\n
  \ "
  let result = markbar#MarkData#fromMarkString(markstring)
Then:
  AssertEqual 'MarkData', result['TYPE']
  AssertEqual 'a',  result.getMark()
  AssertEqual '97', result.getLineNo()
  AssertEqual '0',  result.getColumnNo()
  Assert           !result.isGlobal()

Execute (MarkData: Non-Alphabetic Mark):
  let markstring = "
    \ [      1    0 The quick brown fox jumps over the lazy dog\n
  \ "
  let result = markbar#MarkData#fromMarkString(markstring)
Then:
  AssertEqual 'MarkData', result['TYPE']
  AssertEqual '[', result.getMark()
  AssertEqual '1', result.getLineNo()
  AssertEqual '0', result.getColumnNo()
  Assert          !result.isGlobal()

Execute (MarkData: Construct from 'Synthetic' Markstring):
  normal! i12345
  normal! viwy
  let left_bracket =
    \ markbar#MarkData#fromMarkString(markbar#helpers#MakeMarkString('['))
  let right_bracket =
    \ markbar#MarkData#fromMarkString(markbar#helpers#MakeMarkString(']'))
Then:
  AssertEqual 'MarkData', result['TYPE']
  AssertEqual '[',  left_bracket.getMark()
  AssertEqual '1',  left_bracket.getLineNo()
  AssertEqual '1',  left_bracket.getColumnNo()
  Assert           !left_bracket.isGlobal()

  AssertEqual 'MarkData', result['TYPE']
  AssertEqual ']',  right_bracket.getMark()
  AssertEqual '1',  right_bracket.getLineNo()
  AssertEqual '5',  right_bracket.getColumnNo()
  Assert           !right_bracket.isGlobal()

Execute (MarkData: Global File Mark):
  let markstring = "
    \ D      64    31 The quick brown fox jumps over the lazy dog\r\n
  \ "
  let result = markbar#MarkData#fromMarkString(markstring)
Then:
  AssertEqual 'MarkData', result['TYPE']
  AssertEqual 'D',  result.getMark()
  AssertEqual '64', result.getLineNo()
  AssertEqual '31', result.getColumnNo()
  Assert            result.isGlobal()

Execute (MarkData: ShaDa Numeric Mark):
  let markstring = "
    \ 8      19   5 The quick brown fox jumps over the lazy dog\n
  \ "
  let result = markbar#MarkData#fromMarkString(markstring)
Then:
  AssertEqual 'MarkData', result['TYPE']
  AssertEqual '8',  result.getMark()
  AssertEqual '19', result.getLineNo()
  AssertEqual '5',  result.getColumnNo()
  Assert            result.isGlobal()

Execute (MarkData: Error Check, Invalid Markstring):
  let markstring = "
    \ D      1  The quick brown fox jumps over the lazy dog\r\n
  \ "
Then:
  AssertThrows markbar#MarkData#fromMarkString(markstring)
