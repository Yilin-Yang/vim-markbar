Execute (MarkData constructs local alphabetic marks properly):
  let g:result = markbar#MarkData#New('a', [0, 97, 1, 0], 'foobar.txt',
                                    \ '/foo/bar/foobar.txt')
Then:
  AssertEqual 'MarkData', g:result['TYPE']
  AssertEqual 'a',  g:result.getMarkChar()
  AssertEqual 97, g:result.getLineNo()
  AssertEqual 1,  g:result.getColumnNo()
  Assert          !g:result.isGlobal()

Execute (MarkData constructs non-alphabetic marks properly):
  let g:result = markbar#MarkData#New('[', [0, 1, 1, 0], 'foobar.txt',
                                    \ '/foo/bar/foobar.txt')
Then:
  AssertEqual 'MarkData', g:result['TYPE']
  AssertEqual '[', g:result.getMarkChar()
  AssertEqual 1,   g:result.getLineNo()
  AssertEqual 1,   g:result.getColumnNo()
  Assert          !g:result.isGlobal()

Execute (MarkData constructs [, ] marks properly):
  let left_bracket =
    \ markbar#MarkData#New('[', [0, 1, 1, 0], 'foobar.txt',
                         \ '/foo/bar/foobar.txt')
  let right_bracket =
    \ markbar#MarkData#New(']', [0, 1, 5, 0], 'foobar.txt',
                         \ '/foo/bar/foobar.txt')
Then:
  AssertEqual 'MarkData', g:result['TYPE']
  AssertEqual '[', left_bracket.getMarkChar()
  AssertEqual 1,   left_bracket.getLineNo()
  AssertEqual 1,   left_bracket.getColumnNo()
  Assert          !left_bracket.isGlobal()

  AssertEqual 'MarkData', g:result['TYPE']
  AssertEqual ']',  right_bracket.getMarkChar()
  AssertEqual 1,    right_bracket.getLineNo()
  AssertEqual 5,    right_bracket.getColumnNo()
  Assert           !right_bracket.isGlobal()

Execute (MarkData constructs global file marks properly):
  let g:result = markbar#MarkData#New('D', [0, 64, 31, 0], 'foobar.txt',
                                    \ '/foo/bar/foobar.txt')
Then:
  AssertEqual 'MarkData', g:result['TYPE']
  AssertEqual 'D',  g:result.getMarkChar()
  AssertEqual 64,   g:result.getLineNo()
  AssertEqual 31,   g:result.getColumnNo()
  Assert            g:result.isGlobal()

Execute (MarkData constructs numeric marks properly):
  let g:result = markbar#MarkData#New('8', [0, 19, 5, 0], 'foobar.txt',
                                    \ '/foo/bar/foobar.txt')
Then:
  AssertEqual 'MarkData', g:result['TYPE']
  AssertEqual '8',  g:result.getMarkChar()
  AssertEqual 19,   g:result.getLineNo()
  AssertEqual 5,    g:result.getColumnNo()
  Assert            g:result.isGlobal()

Execute (MarkData throws when constructed with non-positive line or column number):
  AssertThrows markbar#MarkData#New('D', [0, 0, 1, 0], 'foobar.txt',
                                  \ '/foo/bar/foobar.txt')
  AssertThrows markbar#MarkData#New('D', [0, 1, 0, 0], 'foobar.txt',
                                  \ '/foo/bar/foobar.txt')

Execute (MarkData throws when given badly formatted getpos output):
  AssertThrows markbar#MarkData#New('D', [0, 1, 0], 'foobar.txt',
                                  \ '/foo/bar/foobar.txt')

Execute (MarkData gives proper names to "punctuation marks"):
  let g:marks_and_names = [
    \ ["'", 'Last Jump'],
    \ ['<', 'Selection Start'],
    \ ['>', 'Selection End'],
    \ ['"', 'Left Buffer'],
    \ ['^', 'Left Insert Mode'],
    \ ['.', 'Last Change'],
    \ ['[', 'Change/Yank Start'],
    \ [']', 'Change/Yank End'],
    \ ['(', 'Sentence Start'],
    \ [')', 'Sentence End'],
    \ ['{', 'Paragraph Start'],
    \ ['}', 'Paragraph End'],
  \ ]
  for [g:mark, g:name] in g:marks_and_names
    let g:markdata = markbar#MarkData#New(g:mark, [0, 1, 2, 0],
        \ 'foobar.txt', '/foo/bar/foobar.txt')
    AssertEqual g:name, g:markdata.getDefaultName()
  endfor
