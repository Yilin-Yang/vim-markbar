Before (Reload Test Files):
  " Largely a duplicate of load-test-files.vader, but included in a `Before:`
  " block rather than an `Execute:` block
  let s:test_files = [
    \ '1lines.txt',
    \ '2lines.txt',
    \ '10lines.txt',
  \ ]

  let s:test_file_to_check = s:test_files[0]
  if !filereadable(s:test_file_to_check)
    throw 'ERROR: required test file "'
      \ . s:test_file_to_check
      \ . '" not available in PWD!'
  endif

  let s:i = 0
  while s:i <# len(s:test_files)
    execute 'normal :edit! ' . s:test_files[s:i] . "\<cr>"
    let s:i += 1
  endwhile

################################################################################
# FetchBufferLineRange tests
################################################################################
Execute (Get Beyond End of File):
  let result = markbar#helpers#FetchBufferLineRange('*/1lines.txt', 1, 10)
Then:
  let expected = [
    \ 'first line',
  \ ]
  AssertEqual expected, result

Execute (Get Entirely Beyond End of File):
  let result = markbar#helpers#FetchBufferLineRange('*/1lines.txt', 3, 10)
Then:
  let expected = [
    \ ]
  AssertEqual expected, result

Execute (Get Exactly One Line):
  let result = markbar#helpers#FetchBufferLineRange('*/10lines.txt', 5, 5)
Then:
  let expected = [
    \ 'fifth line',
  \ ]
  AssertEqual expected, result

Execute (Get Exactly Two Lines):
  let result = markbar#helpers#FetchBufferLineRange('*/10lines.txt', 5, 6)
Then:
  let expected = [
    \ 'fifth line',
    \ 'sixth line',
  \ ]
  AssertEqual expected, result


Do (Modify File, Don't Write, Get From Unwritten Buffer):
  :edit! 10lines.txt\<cr>ggd4j\<esc>
Then:
  let result = markbar#helpers#FetchBufferLineRange('*/10lines.txt', 1, 5)
  let expected = [
    \ 'sixth line',
    \ 'seventh line',
    \ 'eighth line',
    \ 'ninth line',
    \ 'tenth line',
  \ ]
  AssertEqual expected, result
  edit! 10lines.txt

################################################################################
# FetchContext tests
################################################################################
Execute (Error Check: Non-Integer around_line):
  AssertThrow call markbar#helpers#FetchContext('*/2lines.txt', 1.5, 2)

Execute (Error Check: Non-Integer num_lines):
  AssertThrow call markbar#helpers#FetchContext('*/2lines.txt', 1, 2.5)

Execute (Error Check: Zero-valued around_line):
  AssertThrow call markbar#helpers#FetchContext('*/2lines.txt', 0, 2)

Execute (Get One-Line Context):
  let result = markbar#helpers#FetchContext('*/2lines.txt', 2, 1)
Then:
  let expected = ['second line']
  AssertEqual expected, result

Execute (Get Zero-Sized Context):
  AssertEqual [], markbar#helpers#FetchContext('*/10lines.txt', 1, 0)

Execute (Get Even-Sized Context):
  let result = markbar#helpers#FetchContext('*/10lines.txt', 2, 4)
Then:
  let expected = [
    \ 'first line',
    \ 'second line',
    \ 'third line',
    \ 'fourth line',
  \ ]
  AssertEqual expected, result

Execute (Get Odd-Sized Context):
  let result = markbar#helpers#FetchContext('*/10lines.txt', 5, 5)
Then:
  let expected = [
    \ 'third line',
    \ 'fourth line',
    \ 'fifth line',
    \ 'sixth line',
    \ 'seventh line',
  \ ]
  AssertEqual expected, result

Execute (Get Context, Cut Off by Top of File):
  let result = markbar#helpers#FetchContext('*/2lines.txt', 1, 3)
Then:
  let expected = [
    \ '~',
    \ 'first line',
    \ 'second line',
  \ ]
  AssertEqual expected, result

Execute (Get Context, Cut Off by Bottom of File):
  let result = markbar#helpers#FetchContext('*/2lines.txt', 2, 3)
Then:
  let expected = [
    \ 'first line',
    \ 'second line',
    \ '~',
  \ ]
  AssertEqual expected, result
