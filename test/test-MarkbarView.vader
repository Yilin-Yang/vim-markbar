Include: WindowHelpers.vader

Execute (Initialize MarkbarModel):
  let g:markbar_model = markbar#MarkbarModel#New(markbar#ShaDaRosters#New())

Execute (Test Initialize Markbar Buffer):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  let g:open_markbar_args = ['botright', v:true, 35]
  let g:buffer = g:markbar_view.getMarkbarBuffer()
Then:
  Assert bufexists(g:buffer)
  " only sets buflisted after entering the buffer
  AssertEqual 'nofile',  getbufvar(g:buffer, '&buftype')
  AssertEqual 'hide',    getbufvar(g:buffer, '&bufhidden')
  AssertEqual 0,         getbufvar(g:buffer, '&swapfile')
  AssertEqual 'markbar', getbufvar(g:buffer, '&filetype')
  AssertEqual 'markbar', getbufvar(g:buffer, '&syntax')
  AssertEqual 1,         getbufvar(g:buffer, 'is_markbar')

Execute (Test Open Window):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  AssertEqual 0,         getbufvar(g:buffer, '&buflisted')

  let g:winnr = winnr()

  AssertEqual    1, getwinvar(g:winnr,    '&winfixwidth')
  AssertEqual    1, getwinvar(g:winnr,   '&winfixheight')
  AssertEqual    1, getwinvar(g:winnr,     '&cursorline')
  " avoid type mismatch because &fdc is a string in neovim and a number in vim
  Assert      0 ==# getwinvar(g:winnr,     '&foldcolumn')
  AssertEqual 'no', getwinvar(g:winnr,     '&signcolumn')
  AssertEqual    0, getwinvar(g:winnr, '&relativenumber')
  AssertEqual    0, getwinvar(g:winnr,         '&number')
  AssertEqual    0, getwinvar(g:winnr,           '&wrap')
  AssertEqual    0, getwinvar(g:winnr,          '&spell')
  AssertEqual    1, getwinvar(g:winnr,      'is_markbar')

Execute (Test Open Window, Switch Out, Already Open):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  let g:cur_window = winnr()
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  let g:correct_num_windows = len(tabpagebuflist())
  execute g:cur_window . 'wincmd w'
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
Then:
  AssertEqual g:correct_num_windows, len(tabpagebuflist())
  Assert b:is_markbar

Execute (Test Close Window):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  let g:correct_num_windows = len(tabpagebuflist())
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  call g:markbar_view.closeMarkbar()
Then:
  AssertEqual g:correct_num_windows, len(tabpagebuflist())
  Assert !exists('b:is_markbar')

Execute (Test Close Window, None Open):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  let g:correct_num_windows = len(tabpagebuflist())
  call g:markbar_view.closeMarkbar()
Then:
  AssertEqual g:correct_num_windows, len(tabpagebuflist())
  Assert !exists('b:is_markbar')

Execute (Test markbarIsOpenCurrentTab, True):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
Then:
  Assert g:markbar_view.markbarIsOpenCurrentTab()

Execute (Test markbarIsOpenCurrentTab, Different Tab):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  tabnew
Then:
  Assert !g:markbar_view.markbarIsOpenCurrentTab()

Execute (Test markbarIsOpenCurrentTab, None Open):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  call g:markbar_view.closeMarkbar()
Then:
  Assert !g:markbar_view.markbarIsOpenCurrentTab()

Execute (Test getMarkbarWinID, No Markbar Buffer):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  let g:winid = markbar_view.getMarkbarWinID()
Then:
  AssertEqual -1, g:winid

Execute (Test getMarkbarWinID, Markbar Exists But Not Open):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  call g:markbar_view.closeMarkbar()
  let g:winid = markbar_view.getMarkbarWinID()
Then:
  AssertEqual -1, g:winid

Execute (Test getMarkbarWinID, Markbar Exists In Different Tab):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  tabnew
  let g:winid = markbar_view.getMarkbarWinID()
Then:
  AssertEqual -1, g:winid

Execute (Test getMarkbarWinID, Markbar Exists in Current Tab):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  let g:old_winid = win_getid()
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  call win_gotoid(g:old_winid)
  let g:winid = markbar_view.getMarkbarWinID()
Then:
  call win_gotoid(g:winid)
  Assert b:is_markbar

Execute (Test _saveWinState, _restoreWinState):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  tabnew
  vsplit
  resize 10
  split
  resize 20
  vsplit
  call g:markbar_view._saveWinState()
  let g:saved_state = GetWinState()
  call call(g:markbar_view['openMarkbar'], g:open_markbar_args)
  call g:markbar_view.closeMarkbar()
  call g:markbar_view._restoreWinState()
Then:
  call AssertWinStatesAboutEqual(g:saved_state, GetWinState(), 3)

Execute (Test Error Handling for _restoreWinState):
  let g:markbar_view = markbar#MarkbarView#New(g:markbar_model)
  call g:markbar_view._saveWinState()
  tabnew
  AssertThrows call g:markbar_view._restoreWinState(0), 'Did not throw on wrong tabpage'
  call g:markbar_view._restoreWinState()  " should do nothing

  vsplit
  split
  call g:markbar_view._saveWinState()

  q
  AssertThrows call g:markbar_view._restoreWinState(0), 'Did not throw on different num windows'
  call g:markbar_view._restoreWinState()  " should do nothing
  

" NOTE: uses g:markbar_view from last test case, since these functions
"       are essentially "static" functions
Given (Fake Markbar Buffer):
  " Press ? for help
  ['A]: test-openmarkbar.vader [l:    1, c:    0]
      ~
      ~
      Include: clear-marks.vader
      
      Execute (Set Settings):
  ['B]: 30lines.txt [l:   20, c:    0]
      eighteenth line
      nineteenth line
      twentieth line
      twenty-first line
      twenty-second line
  ['C]: 50lines.txt [l:   30, c:    0]
      twenty-eighth line
      twenty-ninth line
      thirtieth line
      thirty-first line
      thirty-second line
  ['D]: 50lines.txt [l:   40, c:    0]
      thirty-eighth line
      thirty-ninth line
      fortieth line
      forty-first line
      forty-second line
  ['E]: 50lines.txt [l:   50, c:    0]
      forty-eighth line
      forty-ninth line
      fiftieth line
      ~
      ~
  

Execute (Get Current Mark, None Selected):
  normal! gg
  AssertEqual '', g:markbar_view.getCurrentMarkHeading()

Execute (Get Next Mark):
  normal! gg
  AssertEqual 2, g:markbar_view._getNextMarkHeadingLine()

Execute (Get Current Mark, Cursor Over Section Header):
  normal! 2G
  AssertEqual 2,   g:markbar_view.getCurrentMarkHeadingLine()
  AssertEqual 'A', g:markbar_view.getCurrentMarkHeading()

Execute (Get Next Mark, From Section Header):
  normal! 2G
  AssertEqual 8, g:markbar_view._getNextMarkHeadingLine()

Execute (Get Current Mark, From Mark Context):
  normal! 10G
  AssertEqual 8,  g:markbar_view.getCurrentMarkHeadingLine()
  AssertEqual 'B', g:markbar_view.getCurrentMarkHeading()

Execute (Get Next Mark, From Mark Context):
  normal! 10G
  AssertEqual 14, g:markbar_view._getNextMarkHeadingLine()

Execute (Get Previous Mark, From Bottom of File):
  normal! G
  AssertEqual 26, g:markbar_view._getPreviousMarkHeadingLine()

Execute (Get Previous Mark, From Mark Context):
  normal! 21G
  AssertEqual 20, g:markbar_view._getPreviousMarkHeadingLine()

Execute (Get Previous Mark, From Section Header):
  normal! 14G
  AssertEqual 8, g:markbar_view._getPreviousMarkHeadingLine()

Execute (Select Mark):
  call g:markbar_view.selectMark('A')
  AssertEqual 2, getpos('.')[1]

  call g:markbar_view.selectMark('B')
  AssertEqual 8, getpos('.')[1]

  call g:markbar_view.selectMark('C')
  AssertEqual 14, getpos('.')[1]

  call g:markbar_view.selectMark('D')
  AssertEqual 20, getpos('.')[1]

  call g:markbar_view.selectMark('E')
  AssertEqual 26, getpos('.')[1]

Execute (Set Up Cycle Keymappings):
  nnoremap n :<C-U>call g:markbar_view.cycleToNextMark(v:count1)<cr>
  nnoremap N :<C-U>call g:markbar_view.cycleToPreviousMark(v:count1)<cr>

Do (Iterate Through Marks with Next):
  ggnnnnn
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 26, cur_pos[1]

Do (Use Count with Next):
  gg5n
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 26, cur_pos[1]

Do (Iterate Through Marks with Previous):
  GNNNNN
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 2, cur_pos[1]

Do (Use Count with Previous):
  G5N
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 2, cur_pos[1]
