Include: clear-marks.vader
Include: load-test-files.vader
Include: MarkDataHelpers.vader

Execute (Setup):
  let g:rosters = markbar#ShaDaRosters#New()

Execute (BufferCache: isGlobal Test, True):
  let temp_cache = markbar#BufferCache#New(0, g:rosters)
Then:
  Assert temp_cache.isGlobal()

Execute (BufferCache: isGlobal Test, False):
  let temp_cache = markbar#BufferCache#New(bufnr('%'), g:rosters)
Then:
  Assert !temp_cache.isGlobal()

Execute (BufferCache: Populate Local Cache):
  execute 'normal :edit! ' . '50lines.txt' . "\<cr>"
  execute  '5mark a'
  execute '15mark b'
  execute '25mark c'
  execute '35mark d'
  execute '45mark e'
  let g:filepath_50lines = expand('%:p')
  let cache_50lines = markbar#BufferCache#New(bufnr('%'), g:rosters)
  call cache_50lines.updateCache(markbar#helpers#GetLocalMarks(),
      \ '50lines.txt', g:filepath_50lines)
Then:
  let g:bufno_50lines = bufnr('%')
  let buffer_marks = cache_50lines['marks_dict']
  call AssertParsedCorrectly(['a',  5, 1, '50lines.txt', g:filepath_50lines], buffer_marks['a'])
  call AssertParsedCorrectly(['b', 15, 1, '50lines.txt', g:filepath_50lines], buffer_marks['b'])
  call AssertParsedCorrectly(['c', 25, 1, '50lines.txt', g:filepath_50lines], buffer_marks['c'])
  call AssertParsedCorrectly(['d', 35, 1, '50lines.txt', g:filepath_50lines], buffer_marks['d'])
  call AssertParsedCorrectly(['e', 45, 1, '50lines.txt', g:filepath_50lines], buffer_marks['e'])

Execute (BufferCache: Populate Global Cache):
  execute 'normal! :e! #' . g:bufno_50lines . "\<cr>"
  execute '30mark C'
  execute '40mark D'
  execute '50mark E'
  let global_cache = markbar#BufferCache#New(0, g:rosters)
  call global_cache.updateCache(markbar#helpers#GetGlobalMarks(), '', '')
Then:
  " check globals
  let buffer_marks = global_cache['marks_dict']
  call AssertParsedCorrectly(['C', 30, 1, '50lines.txt', g:filepath_50lines], buffer_marks['C'])
  call AssertParsedCorrectly(['D', 40, 1, '50lines.txt', g:filepath_50lines], buffer_marks['D'])
  call AssertParsedCorrectly(['E', 50, 1, '50lines.txt', g:filepath_50lines], buffer_marks['E'])

Execute (BufferCache global marks populate correctly from different buffer):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  call global_cache.updateCache(markbar#helpers#GetGlobalMarks(), '', '')
Then:
  let buffer_marks = global_cache['marks_dict']
  call AssertParsedCorrectly(['C', 30, 1, '50lines.txt', g:filepath_50lines], buffer_marks['C'])
  call AssertParsedCorrectly(['D', 40, 1, '50lines.txt', g:filepath_50lines], buffer_marks['D'])
  call AssertParsedCorrectly(['E', 50, 1, '50lines.txt', g:filepath_50lines], buffer_marks['E'])

Execute (BufferCache: Add More Global Marks; Add Local Marks):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  let g:bufno_30lines = bufnr('%')
  execute '10mark A'
  execute '20mark B'

  execute  '1mark e'
  execute  '5mark d'
  execute '10mark c'
  execute '15mark b'
  execute '20mark a'

  let g:filepath_30lines = expand('%:p')
  let g:cache_30lines = markbar#BufferCache#New(bufnr('%'), g:rosters)
  call g:cache_30lines.updateCache(markbar#helpers#GetLocalMarks(),
      \ '30lines.txt', g:filepath_30lines)
  call g:global_cache.updateCache(markbar#helpers#GetGlobalMarks(), '', '')

Then:
  let buffer_marks = cache_30lines['marks_dict']
  call AssertParsedCorrectly(['e',  1, 1, '30lines.txt', g:filepath_30lines], buffer_marks['e'])
  call AssertParsedCorrectly(['d',  5, 1, '30lines.txt', g:filepath_30lines], buffer_marks['d'])
  call AssertParsedCorrectly(['c', 10, 1, '30lines.txt', g:filepath_30lines], buffer_marks['c'])
  call AssertParsedCorrectly(['b', 15, 1, '30lines.txt', g:filepath_30lines], buffer_marks['b'])
  call AssertParsedCorrectly(['a', 20, 1, '30lines.txt', g:filepath_30lines], buffer_marks['a'])

  " make sure that we didn't somehow overwrite these older ones
  let buffer_marks = cache_50lines['marks_dict']
  call AssertParsedCorrectly(['a',  5, 1, '50lines.txt', g:filepath_50lines], buffer_marks['a'])
  call AssertParsedCorrectly(['b', 15, 1, '50lines.txt', g:filepath_50lines], buffer_marks['b'])
  call AssertParsedCorrectly(['c', 25, 1, '50lines.txt', g:filepath_50lines], buffer_marks['c'])
  call AssertParsedCorrectly(['d', 35, 1, '50lines.txt', g:filepath_50lines], buffer_marks['d'])
  call AssertParsedCorrectly(['e', 45, 1, '50lines.txt', g:filepath_50lines], buffer_marks['e'])

  let buffer_marks = global_cache['marks_dict']
  call AssertParsedCorrectly(['A', 10, 1, '30lines.txt', g:filepath_30lines], buffer_marks['A'])
  call AssertParsedCorrectly(['B', 20, 1, '30lines.txt', g:filepath_30lines], buffer_marks['B'])
  call AssertParsedCorrectly(['C', 30, 1, '50lines.txt', g:filepath_50lines], buffer_marks['C'])
  call AssertParsedCorrectly(['D', 40, 1, '50lines.txt', g:filepath_50lines], buffer_marks['D'])
  call AssertParsedCorrectly(['E', 50, 1, '50lines.txt', g:filepath_50lines], buffer_marks['E'])


Execute (BufferCache: Fetch Contexts for Onscreen Buffer):
  execute 'normal :edit! ' . '50lines.txt' . "\<cr>"
  call cache_50lines.updateContexts(3)
Then:
  " Only check 'indicator' values, for brevity. If these are fine, and if the
  " `test-fetchlines.vader` tests pass, assume that context fetching itself is
  " fine.
  let buffer_marks = cache_50lines['marks_dict']

  let expected = [
      \ 'fourth line',
      \ 'fifth line',
      \ 'sixth line',
    \ ]
  AssertEqual expected, buffer_marks['a']['_context']

  let expected = [
      \ 'forty-fourth line',
      \ 'forty-fifth line',
      \ 'forty-sixth line',
    \ ]
  AssertEqual expected, buffer_marks['e']['_context']


Execute (BufferCache: Delete Mark, Update Local Contexts, 30lines.txt):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  execute 'delmarks a'
  call cache_30lines.updateCache(markbar#helpers#GetLocalMarks(),
      \ '30lines.txt', g:filepath_30lines)
Then:
  Assert !has_key(cache_30lines['marks_dict'], 'a')

Execute (BufferCache: Update Globals in Offscreen, Unloaded Buffer):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  execute 'bunload ' . g:bufno_50lines
  call global_cache.updateContexts(3)
Then:
  let global_marks = global_cache['marks_dict']
  " even after unloading the buffer, the plugin should still be able to fetch
  " contexts from the files on disk
  let expected = [
      \ 'ninth line',
      \ 'tenth line',
      \ 'eleventh line',
    \ ]
  AssertEqual expected, global_marks['A']['_context']

  let expected = [
      \ 'twenty-ninth line',
      \ 'thirtieth line',
      \ 'thirty-first line',
    \ ]
  AssertEqual expected, global_marks['C']['_context']

  let expected = [
      \ 'forty-ninth line',
      \ 'fiftieth line',
      \ '~',
    \ ]
  AssertEqual expected, global_marks['E']['_context']
