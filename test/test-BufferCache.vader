Include: clear-marks.vader
Include: load-test-files.vader

Execute (BufferCache: isGlobal Test, True):
  let temp_cache = markbar#BufferCache#new(markbar#constants#GLOBAL_MARKS())
Then:
  Assert temp_cache.isGlobal()

Execute (BufferCache: isGlobal Test, False):
  let temp_cache = markbar#BufferCache#new(bufnr('%'))
Then:
  Assert !temp_cache.isGlobal()

Execute (BufferCache: Populate Local Cache):
  execute 'normal :edit! ' . '50lines.txt' . "\<cr>"
  execute  '5mark a'
  execute '15mark b'
  execute '25mark c'
  execute '35mark d'
  execute '45mark e'
  let cache_50lines = markbar#BufferCache#new(bufnr('%'))
  call cache_50lines.updateCache(markbar#helpers#GetLocalMarks())
Then:
  let g:bufno_50lines = bufnr('%')
  let buffer_marks = cache_50lines['marks_dict']
  AssertEqual ['a',  '5', '0'],   buffer_marks['a']['_data']
  AssertEqual ['b', '15', '0'],   buffer_marks['b']['_data']
  AssertEqual ['c', '25', '0'],   buffer_marks['c']['_data']
  AssertEqual ['d', '35', '0'],   buffer_marks['d']['_data']
  AssertEqual ['e', '45', '0'],   buffer_marks['e']['_data']

Execute (BufferCache: Populate Global Cache):
  " should still be on 50lines.txt, but just in case,
  execute 'normal! :e! #' . g:bufno_50lines . "\<cr>"
  execute '30mark C'
  execute '40mark D'
  execute '50mark E'
  let global_cache = markbar#BufferCache#new(markbar#constants#GLOBAL_MARKS())
  call global_cache.updateCache(markbar#helpers#GetGlobalMarks())
Then:
  " check globals
  let buffer_marks = global_cache['marks_dict']
  AssertEqual ['C', '30', '0'],   buffer_marks['C']['_data']
  AssertEqual ['D', '40', '0'],   buffer_marks['D']['_data']
  AssertEqual ['E', '50', '0'],   buffer_marks['E']['_data']

Execute (BufferCache: Add More Global Marks; Add Local Marks):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  let g:bufno_30lines = bufnr('%')
  execute '10mark A'
  execute '20mark B'

  execute  '1mark e'
  execute  '5mark d'
  execute '10mark c'
  execute '15mark b'
  execute '20mark a'

  let cache_30lines = markbar#BufferCache#new(bufnr('%'))
  call cache_30lines.updateCache(markbar#helpers#GetLocalMarks())
  call global_cache.updateCache(markbar#helpers#GetGlobalMarks())

Then:
  let buffer_marks = cache_30lines['marks_dict']
  AssertEqual ['e',  '1', '0'],   buffer_marks['e']['_data']
  AssertEqual ['d',  '5', '0'],   buffer_marks['d']['_data']
  AssertEqual ['c', '10', '0'],   buffer_marks['c']['_data']
  AssertEqual ['b', '15', '0'],   buffer_marks['b']['_data']
  AssertEqual ['a', '20', '0'],   buffer_marks['a']['_data']

  " make sure that we didn't somehow overwrite these older ones
  let buffer_marks = cache_50lines['marks_dict']
  AssertEqual ['a',  '5', '0'],   buffer_marks['a']['_data']
  AssertEqual ['b', '15', '0'],   buffer_marks['b']['_data']
  AssertEqual ['c', '25', '0'],   buffer_marks['c']['_data']
  AssertEqual ['d', '35', '0'],   buffer_marks['d']['_data']
  AssertEqual ['e', '45', '0'],   buffer_marks['e']['_data']

  let buffer_marks = global_cache['marks_dict']
  AssertEqual ['A', '10', '0'],   buffer_marks['A']['_data']
  AssertEqual ['B', '20', '0'],   buffer_marks['B']['_data']
  AssertEqual ['C', '30', '0'],   buffer_marks['C']['_data']
  AssertEqual ['D', '40', '0'],   buffer_marks['D']['_data']
  AssertEqual ['E', '50', '0'],   buffer_marks['E']['_data']


Execute (BufferCache: Fetch Contexts for Onscreen Buffer):
  execute 'normal :edit! ' . '50lines.txt' . "\<cr>"
  call cache_50lines.updateContexts(3)
Then:
  " Only check 'indicator' values, for brevity. If these are fine, and if the
  " `test-fetchlines.vader` tests pass, assume that context fetching itself is
  " fine.
  let buffer_marks = cache_50lines['marks_dict']

  let expected = [
      \ 'fourth line',
      \ 'fifth line',
      \ 'sixth line',
    \ ]
  AssertEqual expected, buffer_marks['a']['_context']

  let expected = [
      \ 'forty-fourth line',
      \ 'forty-fifth line',
      \ 'forty-sixth line',
    \ ]
  AssertEqual expected, buffer_marks['e']['_context']


Execute (BufferCache: Delete Mark, Update Local Contexts, 30lines.txt):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  execute 'delmarks a'
  call cache_30lines.updateCache(markbar#helpers#GetLocalMarks())
Then:
  Assert !has_key(cache_30lines['marks_dict'], 'a')

Execute (BufferCache: Update Globals in Offscreen, Unloaded Buffer):
  execute 'normal :edit! ' . '30lines.txt' . "\<cr>"
  execute 'bunload ' . g:bufno_50lines
  call global_cache.updateContexts(3)
Then:
  let global_marks = global_cache['marks_dict']
  " even after unloading the buffer, the plugin should still be able to fetch
  " contexts from the files on disk
  let expected = [
      \ 'ninth line',
      \ 'tenth line',
      \ 'eleventh line',
    \ ]
  AssertEqual expected, global_marks['A']['_context']

  let expected = [
      \ 'twenty-ninth line',
      \ 'thirtieth line',
      \ 'thirty-first line',
    \ ]
  AssertEqual expected, global_marks['C']['_context']

  let expected = [
      \ 'forty-ninth line',
      \ 'fiftieth line',
      \ '~',
    \ ]
  AssertEqual expected, global_marks['E']['_context']
