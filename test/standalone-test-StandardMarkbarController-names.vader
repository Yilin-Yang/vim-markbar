Execute (Setup Controller):
  let g:model = markbar#MarkbarModel#get()
  let g:view = markbar#MarkbarView#new(g:model)
  let g:controller = markbar#StandardMarkbarController#new(g:model, g:view)

Execute (Make 'Synthetic' MarkData Objects, Set Marks):
  let g:local_alph = markbar#MarkData#fromMarkString(
    \ 'a 1 2 foo'
  \ )
  let g:local_punc = markbar#MarkData#fromMarkString(
    \ '. 3 4 foo'
  \ )
  let g:file_mark = markbar#MarkData#fromMarkString(
    \ 'A 1 2 global.txt'
  \ )
  let g:numeric_mark = markbar#MarkData#fromMarkString(
    \ '1 3 4 global.txt'
  \ )

  let g:markbar_mark_name_format_string = 'local %d %d'
  let g:markbar_mark_name_arguments     = ['line', 'col']

  let g:markbar_file_mark_format_string = 'file %d %d'
  let g:markbar_file_mark_arguments     = ['line', 'col']

  let g:markbar_numbered_mark_format_string = 'numbered %d %d'
  let g:markbar_numbered_mark_arguments     = ['line', 'col']

Execute (Test Local Alphabetic Mark):
  let test_chars = 'abcdefghijklmnopqrstuvwxyz'
  let i = 0
  while i <# len(test_chars)
    let g:local_alph['_data'][0] = test_chars[i]
    AssertEqual 'local 1 2', 
      \ g:controller._getDefaultMarkName(g:local_alph),
      \ 'Failed on: ' . test_chars[i]
    let i += 1
  endwhile

Execute (Test Local Non-Alphabetic Mark):
  let test_chars = '[]<>''"^.(){}'
  let i = 0
  while i <# len(test_chars)
    let g:local_punc['_data'][0] = test_chars[i]
    AssertEqual 'local 3 4', 
      \ g:controller._getDefaultMarkName(g:local_punc),
      \ 'Failed on: ' . test_chars[i]
    let i += 1
  endwhile

Execute (Test File Mark):
  let test_chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  let i = 0
  while i <# len(test_chars)
    let g:file_mark['_data'][0] = test_chars[i]
    AssertEqual 'file 1 2', 
      \ g:controller._getDefaultMarkName(g:file_mark),
      \ 'Failed on: ' . test_chars[i]
    let i += 1
  endwhile

Execute (Test Numbered Mark):
  let test_chars = '0123456789'
  let i = 0
  while i <# len(test_chars)
    let g:numeric_mark['_data'][0] = test_chars[i]
    AssertEqual 'numbered 3 4', 
      \ g:controller._getDefaultMarkName(g:numeric_mark),
      \ 'Failed on: ' . test_chars[i]
    let i += 1
  endwhile

Execute (Test Custom Function References):
  function! Foo(string, markdata)
    return      a:markdata['mark']
      \ . ' ' . a:markdata['line']
      \ . ' ' . a:markdata['column']
      \ . ' ' . a:markdata['filename']
      \ . ' ' . a:markdata['context'][0]
      \ . ' ' . a:string
  endfunction

  execute 'normal! :edit! foo.txt\<cr>'
  execute '1mark a'

  let g:markbar_mark_name_format_string = '%s'
  let g:markbar_mark_name_arguments     = [ function('Foo', ['arg']) ]

  let g:local_alph = markbar#MarkData#fromMarkString(
    \ 'a 1 2 foo'
  \ )
  let g:local_alph['_context'] = ['boo']

  call g:controller.openMarkbar()
  AssertEqual 'a 1 2 [Vader-workbench] boo arg', g:controller._getDefaultMarkName(g:local_alph)
