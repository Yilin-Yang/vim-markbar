Execute (Is[...]Mark: Lowercase Letter):
  Assert !markbar#helpers#IsGlobalMark   ('a')
  Assert !markbar#helpers#IsUppercaseMark('a')
  Assert !markbar#helpers#IsNumberedMark ('a')

Execute (Is[...]Mark: Uppercase Letter):
  Assert  markbar#helpers#IsGlobalMark   ('A')
  Assert  markbar#helpers#IsUppercaseMark('A')
  Assert !markbar#helpers#IsNumberedMark ('A')

Execute (Is[...]Mark: Number):
  Assert  markbar#helpers#IsGlobalMark   ('1')
  Assert !markbar#helpers#IsUppercaseMark('1')
  Assert  markbar#helpers#IsNumberedMark ('1')

Execute (Is[...]Mark: Lowercase Letter, ignorecase):
  set ignorecase
  Assert !markbar#helpers#IsGlobalMark   ('a')
  Assert !markbar#helpers#IsUppercaseMark('a')
  Assert !markbar#helpers#IsNumberedMark ('a')
  AssertEqual 1, &ignorecase
  set noignorecase

Execute (Is[...]Mark: Uppercase Letter, ignorecase):
  set ignorecase
  Assert  markbar#helpers#IsGlobalMark   ('A')
  Assert  markbar#helpers#IsUppercaseMark('A')
  Assert !markbar#helpers#IsNumberedMark ('A')
  AssertEqual 1, &ignorecase
  set noignorecase

Execute (Is[...]Mark: Number, ignorecase):
  set ignorecase
  Assert  markbar#helpers#IsGlobalMark   ('1')
  Assert !markbar#helpers#IsUppercaseMark('1')
  Assert  markbar#helpers#IsNumberedMark ('1')
  AssertEqual 1, &ignorecase
  set noignorecase

Execute (Is[...]Mark: Lowercase Letter, nomagic):
  set nomagic
  Assert !markbar#helpers#IsGlobalMark   ('a')
  Assert !markbar#helpers#IsUppercaseMark('a')
  Assert !markbar#helpers#IsNumberedMark ('a')
  AssertEqual 0, &magic
  set magic

Execute (Is[...]Mark: Uppercase Letter, nomagic):
  set nomagic
  Assert  markbar#helpers#IsGlobalMark   ('A')
  Assert  markbar#helpers#IsUppercaseMark('A')
  Assert !markbar#helpers#IsNumberedMark ('A')
  AssertEqual 0, &magic
  set magic

Execute (Is[...]Mark: Number, nomagic):
  set nomagic
  Assert  markbar#helpers#IsGlobalMark   ('1')
  Assert !markbar#helpers#IsUppercaseMark('1')
  Assert  markbar#helpers#IsNumberedMark ('1')
  AssertEqual 0, &magic
  set magic

Execute (markbar#helpers#IsMarkChar() accepts valid mark names):
  for g:c in split(markbar#constants#ALL_MARKS_STRING(), '\zs')
    call markbar#ensure#IsMarkChar(g:c)
  endfor

Execute (markbar#helpers#IsMarkChar() rejects invalid mark names):
  function! AssertThrowsInvalidMarkName(name) abort
    " vader's AssertThrows can't capture a:name from the a: scope
    let g:name = a:name
    AssertThrows call markbar#ensure#IsMarkChar(g:name)
    AssertEqual printf('Invalid mark name: %s', a:name), g:vader_exception
  endfunction

  for g:c in ['!', '@', '#', '$', '%', '&', '*', 'foo']
    call AssertThrowsInvalidMarkName(g:c)
  endfor

Execute (SplitString: Empty):
  let string = ''
  AssertEqual ['', ''], markbar#helpers#SplitString(string, 3)

Execute (SplitString: One Character, Split After End):
  let string = 'a'
  AssertEqual ['a', ''], markbar#helpers#SplitString(string, 3)

Execute (SplitString: One Character, Split At 0):
  let string = 'a'
  AssertEqual ['', 'a'], markbar#helpers#SplitString(string, 0)

Execute (SplitString: One Character, Split Before 0):
  let string = 'a'
  AssertEqual ['', 'a'], markbar#helpers#SplitString(string, -5)

Execute (SplitString: Three Characters, Split Before 0):
  let string = 'abc'
  AssertEqual ['', 'abc'], markbar#helpers#SplitString(string, -1)

Execute (SplitString: Three Characters, Split At 0):
  let string = 'abc'
  AssertEqual ['', 'abc'], markbar#helpers#SplitString(string, 0)

Execute (SplitString: Three Characters, Split In Middle):
  let string = 'abc'
  AssertEqual ['a', 'bc'], markbar#helpers#SplitString(string, 1)

Execute (SplitString: Three Characters, Split Before End):
  let string = 'abc'
  AssertEqual ['ab', 'c'], markbar#helpers#SplitString(string, 2)

Execute (SplitString: Three Characters, Split At End):
  let string = 'abc'
  AssertEqual ['abc', ''], markbar#helpers#SplitString(string, 3)

Execute (SplitString: Three Characters, Split After End):
  let string = 'abc'
  AssertEqual ['abc', ''], markbar#helpers#SplitString(string, 6)

Execute (VimLTypeToString names |type()| values correctly):
  let g:nos_and_names = [
      \ [0, 'v:t_number'],
      \ [1, 'v:t_string'],
      \ [2, 'v:t_func'],
      \ [3, 'v:t_list'],
      \ [4, 'v:t_dict'],
      \ [5, 'v:t_float'],
      \ [6, 'v:t_bool'],
      \ [7, 'v:null'],
    \ ]
    for [g:no, g:name] in g:nos_and_names
      AssertEqual g:name, markbar#helpers#VimLTypeToString(g:no)
    endfor

Execute (VimLTypeToString rejects invalid inputs):
  AssertThrows call markbar#helpers#VimLTypeToString(v:null)
  AssertEqual 'Object is not an integer: v:null', g:vader_exception
  AssertThrows call markbar#helpers#VimLTypeToString('abc')
  AssertEqual "Object is not an integer: 'abc'", g:vader_exception
  AssertThrows call markbar#helpers#VimLTypeToString(23)
  AssertEqual 'Nonexistent variable |type()| with val: 23', g:vader_exception
