Include: clear-marks.vader

Execute (Set Settings, Create Standard Markbar Controller):
  let g:model = markbar#MarkbarModel#get()
  let g:view = markbar#MarkbarView#new(g:model)
  let g:standard_controller = 
    \ markbar#StandardMarkbarController#new(g:model, g:view)

  let g:markbar_enable_mark_highlighting = v:false

  let g:markbar_num_lines_context = 3
  let g:markbar_open_vertical = v:true

  let g:markbar_mark_name_format_string     = ''
  let g:markbar_file_mark_format_string     = '%s'
  let g:markbar_numbered_mark_format_string = ''

  let g:markbar_mark_name_arguments     = []
  let g:markbar_file_mark_arguments     = ['fname']
  let g:markbar_numbered_mark_arguments = []

Do (Open Markbar, No Marks):
  call g:standard_controller.openMarkbar()
Expect:
  

Do (Set Marks, Open Markbar):
  :edit! 10lines.txt\<cr>
  1G5lmA5GmB10GmC
Then:
  let g:markbar_num_lines_context = 3
  call g:standard_controller.openMarkbar()
  AssertEqual 0, &buflisted
  AssertEqual 'nofile', &buftype
  AssertEqual 'hide', &bufhidden
  AssertEqual 0, &swapfile
  AssertEqual 'markbar', &filetype
  AssertEqual 'markbar', &syntax
  AssertEqual 1, b:is_markbar
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      first line
      second line

  ['B]: 10lines.txt
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
  
" Do (Close Markbar):
"   :edit! 10lines.txt\<cr>
"   :let g:bufnr = bufnr('%')\<cr>
"   :call g:standard_controller.openMarkbar()\<cr>
"   :q\<cr>
" Then (FIXME):
"   AssertEqual g:bufnr, bufnr('%')


Do (Re-Open Closed Markbar (E499 Check)):
  :call g:standard_controller.openMarkbar()\<cr>
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      first line
      second line

  ['B]: 10lines.txt
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
  
Do (Move Cursor to Existing Markbar):
  \<C-w>p:call g:standard_controller.openMarkbar()\<cr>
Then:
  " TODO: find a way to check for 'didn't create a new split'
  " AssertEqual num_windows, len(tabpagebuflist())
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      first line
      second line

  ['B]: 10lines.txt
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
  
" Execute (Close Markbar):
"   edit! 10lines.txt
"   let g:bufnr = bufnr('%')
"   call g:standard_controller.openMarkbar()
"   let result = g:standard_controller.closeMarkbar()
" Then (FIXME):
"   Assert result, 'Markbar failed to close!'
"   AssertEqual g:bufnr, bufnr('%')

" TODO: Vader keeps reporting test failure, even though it seems to work
" properly when I do it myself?
" Do (Test For Fixed Markbar Width, Even After Closing Other Splits):
"   :call g:standard_controller.openMarkbar()\<cr>
"   :let g:markbar_width = winwidth(winnr())\<cr>
"   \<C-w>p
"   :vsplit\<cr>
"   :q\<cr>
"   :call g:standard_controller.openMarkbar()\<cr>
" Then:
"   AssertEqual g:markbar_width, winwidth(winnr())
" TODO: ditto the above, but for markbar height
" TODO: Vader wipes out the older Markbar, which doesn't happen when I try
" doing it myself?
" Do (Jump Back to Preexisting Markbar After Modifications):
"   :tabnew 30lines.txt\<cr>
"   mA
"   :tabprev\<cr>
" Expect:
"   ['A]: 30lines.txt
"       first line
"       second line

"   ['B]: 10lines.txt
"       fourth line
"       fifth line
"       sixth line

"   ['C]: 10lines.txt
"       ninth line
"       tenth line
"  

Do (Iterate Through Marks with Next):
  :call g:standard_controller.openMarkbar()\<cr>
  ggnnn
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 12, cur_pos[1]

Do (Use Count with Next):
  :call g:standard_controller.openMarkbar()\<cr>
  gg3n
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 12, cur_pos[1]

Do (Iterate Through Marks with Previous):
  :call g:standard_controller.openMarkbar()\<cr>
  GNNN
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 2, cur_pos[1]

Do (Use Count with Previous):
  :call g:standard_controller.openMarkbar()\<cr>
  G3N
Then:
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 2, cur_pos[1]

Do (Go To Mark):
  :call g:standard_controller.openMarkbar()\<cr>
  2G\<cr>
Then:
  AssertEqual '10lines.txt', expand('%:t')
  let cur_pos = getcurpos()

  " check line number
  AssertEqual 1, cur_pos[1]

  " check column number
  AssertEqual 6, cur_pos[2]

" Do (Rename Mark):
"   :call g:standard_controller.openMarkbar()\<cr>
"   7G
"   rCovfefe the Strong\<cr>
" Expect:
"   " Press ? for help
"   ['A]: 10lines.txt
"       ~
"       first line
"       second line

"   ['B]: Covfefe the Strong
"       fourth line
"       fifth line
"       sixth line

"   ['C]: 10lines.txt
"       ninth line
"       tenth line
"       ~
"  

Execute (Explicitly Rename Mark):
  " NOTE: command line prompt used by 'rename' doesn't seem to work with vader
  let g:mark = g:model.getMarkData('B')
  call g:mark.setName('Covfefe the Strong')
  call g:standard_controller.openMarkbar()
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      first line
      second line

  ['B]: Covfefe the Strong
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
  

Do (Reset Mark Name):
  :call g:standard_controller.openMarkbar()\<cr>
  7Gc
  :call g:standard_controller.openMarkbar()\<cr>
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      first line
      second line

  ['B]: 10lines.txt
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
  

Do (Delete Mark):
  :call g:standard_controller.openMarkbar()\<cr>
  5Gd
Expect:
  " Press ? for help
  ['B]: 10lines.txt
      fourth line
      fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
  
Do (Set New Marks):
  :edit! 10lines.txt\<cr>
  1G5lmA5GmB10G$mC

Execute (Test Mark Highlighting, Backtick-like):
  let g:markbar_enable_mark_highlighting = v:true
  call g:standard_controller.openMarkbar()
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      first➜ line
      second line

  ['B]: 10lines.txt
      fourth line
      ➜fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      tenth lin➜e
      ~
  
Execute (Test Mark Highlighting, Apostrophe-like):
  let g:markbar_enable_mark_highlighting = v:true
  let g:markbar_jump_to_exact_position = v:false
  call g:standard_controller.openMarkbar()
Expect:
  " Press ? for help
  ['A]: 10lines.txt
      ~
      ➜first line
      second line

  ['B]: 10lines.txt
      fourth line
      ➜fifth line
      sixth line

  ['C]: 10lines.txt
      ninth line
      ➜tenth line
      ~
  
Do (Set Local Marks):
  :edit! 10lines.txt\<cr>
  2G0ma4G$mb
Then (Reconfigure Num Lines of Context to Show):
  let g:markbar_num_lines_context = {
      \ 'around_local': 2,
      \ 'around_file': 0,
      \ }
  let g:markbar_jump_to_exact_position = v:true
  call g:standard_controller.openMarkbar()
Expect (Correct Numbers of Lines of Context):
  " Press ? for help
  ['a]: 
      ➜second line
      third line

  ['b]: 
      fourth lin➜e
      fifth line

  ['A]: 10lines.txt

  ['B]: 10lines.txt

  ['C]: 10lines.txt
  
Execute (Disable Mark Highlighting, Then Show Reconfigured Context Length):
  " test an alternate code path
  let g:markbar_enable_mark_highlighting = v:false
  edit! 10lines.txt
  call g:standard_controller.openMarkbar()

Expect (Correct Numbers of Lines of Context):
  " Press ? for help
  ['a]: 
      second line
      third line

  ['b]: 
      fourth line
      fifth line

  ['A]: 10lines.txt

  ['B]: 10lines.txt

  ['C]: 10lines.txt
  
Execute (Show Correct Num Lines When File Shows More than Local):
  " test an alternate code path
  let g:markbar_num_lines_context = {
      \ 'around_local': 0,
      \ 'around_file': 2,
      \ }
  edit! 10lines.txt
  call g:standard_controller.openMarkbar()

Expect (Correct Numbers of Lines of Context):
  " Press ? for help
  ['a]: 

  ['b]: 

  ['A]: 10lines.txt
      first line
      second line

  ['B]: 10lines.txt
      fifth line
      sixth line

  ['C]: 10lines.txt
      tenth line
      ~
  
Execute (Separately Configure Normal and Peekaboo):
  let g:markbar_num_lines_context = {
      \ 'around_local': 1,
      \ 'around_file': 4,
      \ 'peekaboo_around_local': 5,
      \ 'peekaboo_around_file': 8,
      \ }
  edit! 10lines.txt
  call g:standard_controller.openMarkbar()

Expect (Correct Number of Lines of Context):
  " Press ? for help
  ['a]: 
      second line

  ['b]: 
      fourth line

  ['A]: 10lines.txt
      ~
      first line
      second line
      third line

  ['B]: 10lines.txt
      fourth line
      fifth line
      sixth line
      seventh line

  ['C]: 10lines.txt
      ninth line
      tenth line
      ~
      ~
  
